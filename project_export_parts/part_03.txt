--- FILE: lib/features/suppliers/presentation/pages/supplier_agreements_page.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:syria_store/app/widgets/app_drawer.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';
import 'package:syria_store/features/suppliers/presentation/widgets/agreement_card.dart';

class SupplierAgreementsPage extends ConsumerStatefulWidget {
  const SupplierAgreementsPage({super.key});

  @override
  ConsumerState<SupplierAgreementsPage> createState() =>
      _SupplierAgreementsPageState();
}

class _SupplierAgreementsPageState
    extends ConsumerState<SupplierAgreementsPage> {
  final _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // مزامنة حقل البحث مع الـ provider عند بدء التشغيل
    _searchController.text = ref.read(searchQueryProvider);
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final agreementsAsync = ref.watch(agreementsProvider);
    final selectedStatus = ref.watch(statusFilterProvider);

    return Scaffold(
      drawer: const AppDrawer(),
      appBar: AppBar(
        title: const Text('اتفاقيات الموردين'),
        actions: [
          IconButton(
            onPressed: () => context.push('/add-agreement'),
            icon: const Icon(Icons.add_circle_outline),
            tooltip: 'إضافة اتفاقية جديدة',
          ),
        ],
      ),
      body: Column(
        children: [
          // --- ** بداية الإضافة: شريط البحث والفلترة ** ---
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: 'ابحث عن مورد أو تفاصيل اتفاقية...',
                    prefixIcon: const Icon(Icons.search),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(30),
                      borderSide: BorderSide.none,
                    ),
                    filled: true,
                    fillColor: Theme.of(
                      context,
                    ).colorScheme.surfaceVariant.withOpacity(0.5),
                  ),
                  onChanged: (value) {
                    ref.read(searchQueryProvider.notifier).state = value;
                  },
                ),
                const SizedBox(height: 12),
                SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      FilterChip(
                        label: const Text('الكل'),
                        selected: selectedStatus == null,
                        onSelected: (_) =>
                            ref.read(statusFilterProvider.notifier).state =
                                null,
                      ),
                      const SizedBox(width: 8),
                      FilterChip(
                        label: const Text('قيد التسليم'),
                        selected: selectedStatus == 'pending_delivery',
                        onSelected: (_) =>
                            ref.read(statusFilterProvider.notifier).state =
                                'pending_delivery',
                        backgroundColor: Colors.orange.withOpacity(0.1),
                        selectedColor: Colors.orange.shade700,
                      ),
                      const SizedBox(width: 8),
                      FilterChip(
                        label: const Text('مكتمل'),
                        selected: selectedStatus == 'completed',
                        onSelected: (_) =>
                            ref.read(statusFilterProvider.notifier).state =
                                'completed',
                        backgroundColor: Colors.green.withOpacity(0.1),
                        selectedColor: Colors.green.shade700,
                      ),
                      const SizedBox(width: 8),
                      FilterChip(
                        label: const Text('ملغي'),
                        selected: selectedStatus == 'cancelled',
                        onSelected: (_) =>
                            ref.read(statusFilterProvider.notifier).state =
                                'cancelled',
                        backgroundColor: Colors.grey.withOpacity(0.1),
                        selectedColor: Colors.grey.shade700,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // --- ** نهاية الإضافة ** ---
          Expanded(
            child: RefreshIndicator(
              onRefresh: () => ref.refresh(agreementsProvider.future),
              child: agreementsAsync.when(
                data: (agreements) {
                  if (agreements.isEmpty) {
                    return LayoutBuilder(
                      builder: (context, constraints) => SingleChildScrollView(
                        physics: const AlwaysScrollableScrollPhysics(),
                        child: ConstrainedBox(
                          constraints: BoxConstraints(
                            minHeight: constraints.maxHeight,
                          ),
                          child: const Center(
                            child: Text('لا توجد اتفاقيات تطابق هذا البحث.'),
                          ),
                        ),
                      ),
                    );
                  }
                  return ListView.builder(
                    physics: const AlwaysScrollableScrollPhysics(),
                    itemCount: agreements.length,
                    itemBuilder: (context, index) =>
                        AgreementCard(agreement: agreements[index]),
                  );
                },
                loading: () => const Center(child: CircularProgressIndicator()),
                error: (err, stack) =>
                    Center(child: Text('حدث خطأ: ${err.toString()}')),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


--- FILE: lib/features/suppliers/presentation/pages/supplier_details_page.dart ---
// lib/features/suppliers/presentation/pages/supplier_details_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';
import 'package:syria_store/features/suppliers/presentation/providers/supplier_details_provider.dart';
import 'package:syria_store/features/suppliers/presentation/widgets/agreement_card.dart';

class SupplierDetailsPage extends ConsumerWidget {
  final String supplierId;
  final String supplierName;

  const SupplierDetailsPage({
    super.key,
    required this.supplierId,
    required this.supplierName,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final summaryAsync = ref.watch(
      supplierFinancialSummaryProvider(supplierId),
    );
    final paymentsAsync = ref.watch(supplierPaymentsProvider(supplierId));
    final agreementsAsync = ref.watch(agreementsBySupplierProvider(supplierId));
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(title: Text('سجل: $supplierName')),
      body: RefreshIndicator(
        onRefresh: () async {
          ref.invalidate(supplierFinancialSummaryProvider(supplierId));
          ref.invalidate(supplierPaymentsProvider(supplierId));
          ref.invalidate(agreementsBySupplierProvider(supplierId));
        },
        child: SingleChildScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              summaryAsync.when(
                data: (summary) => Card(
                  elevation: 4,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        Text(
                          'الملخص المالي',
                          style: theme.textTheme.titleLarge,
                        ),
                        const Divider(height: 24),
                        _buildFinancialSummaryRow(
                          'إجمالي الاتفاقيات (له):',
                          '\$${summary.totalAgreements.toStringAsFixed(2)}',
                          Colors.red,
                        ),
                        _buildFinancialSummaryRow(
                          'إجمالي الدفعات (لنا):',
                          '\$${summary.totalPaid.toStringAsFixed(2)}',
                          Colors.green,
                        ),
                        const Divider(),
                        _buildFinancialSummaryRow(
                          'الرصيد النهائي:',
                          '\$${summary.balance.toStringAsFixed(2)}',
                          Theme.of(context).primaryColor,
                          isTotal: true,
                        ),
                      ],
                    ),
                  ),
                ),
                loading: () => const Center(child: CircularProgressIndicator()),
                error: (e, s) => Text('خطأ في جلب الملخص المالي: $e'),
              ),
              const SizedBox(height: 24),
              Text('آخر الدفعات', style: theme.textTheme.titleLarge),
              const Divider(),
              paymentsAsync.when(
                data: (payments) {
                  if (payments.isEmpty)
                    return const Center(
                      child: Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Text('لا توجد دفعات مسجلة.'),
                      ),
                    );
                  return ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: payments.length,
                    itemBuilder: (context, index) {
                      final payment = payments[index];
                      return ListTile(
                        leading: const Icon(Icons.payment),
                        title: Text(
                          'دفعة بقيمة \$${payment.amount.toStringAsFixed(2)}',
                        ),
                        subtitle: Text(
                          'بتاريخ: ${DateFormat('yyyy/MM/dd').format(payment.paymentDate)}',
                        ),
                        onTap: () => context.push(
                          '/supplier-agreements/details/${payment.agreementId}',
                        ),
                      );
                    },
                  );
                },
                loading: () => const SizedBox.shrink(),
                error: (e, s) => Text('خطأ في جلب الدفعات: $e'),
              ),
              const SizedBox(height: 24),
              Text('كل الاتفاقيات', style: theme.textTheme.titleLarge),
              const Divider(),
              agreementsAsync.when(
                data: (agreements) {
                  if (agreements.isEmpty)
                    return const Center(
                      child: Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Text('لا توجد اتفاقيات لهذا المورد.'),
                      ),
                    );
                  return ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: agreements.length,
                    itemBuilder: (context, index) {
                      return AgreementCard(agreement: agreements[index]);
                    },
                  );
                },
                loading: () => const SizedBox.shrink(),
                error: (e, s) => Text('خطأ في جلب الاتفاقيات: $e'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFinancialSummaryRow(
    String title,
    String amount,
    Color color, {
    bool isTotal = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            title,
            style: TextStyle(
              fontSize: 16,
              color: isTotal ? Colors.black : Colors.grey.shade700,
            ),
          ),
          Text(
            amount,
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      ),
    );
  }
}


--- FILE: lib/features/suppliers/presentation/providers/agreement_details_provider.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/supplier_agreement_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_items_provider.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

final agreementDetailsProvider = FutureProvider.autoDispose
    .family<SupplierAgreement?, String>((ref, agreementId) async {
      final supabase = ref.watch(supabaseProvider);
      try {
        final response = await supabase
            .from('supplier_agreements')
            .select('*, suppliers(id, name)')
            .eq('id', agreementId)
            .single();
        return SupplierAgreement.fromJson(response);
      } catch (e) {
        debugPrint("Error fetching agreement details: $e");
        return null;
      }
    });

final updateAgreementStatusControllerProvider =
    StateNotifierProvider.autoDispose<UpdateAgreementStatusController, bool>((
      ref,
    ) {
      return UpdateAgreementStatusController(ref: ref);
    });

class UpdateAgreementStatusController extends StateNotifier<bool> {
  final Ref _ref;
  UpdateAgreementStatusController({required Ref ref})
    : _ref = ref,
      super(false);

  Future<void> _refreshAllProviders(String agreementId) async {
    _ref.invalidate(agreementsProvider);
    _ref.invalidate(agreementDetailsProvider(agreementId));
    _ref.invalidate(agreementItemsProvider(agreementId));
    try {
      final agreement = await _ref.read(
        agreementDetailsProvider(agreementId).future,
      );
      if (agreement?.supplierId != null) {
        _ref.invalidate(agreementsBySupplierProvider(agreement!.supplierId!));
      }
    } catch (_) {}
  }

  Future<bool> receiveItems({
    required BuildContext context,
    required String itemId,
    required String agreementId,
    required int quantity,
    String? notes,
  }) async {
    if (state) return false;
    state = true;
    try {
      await _ref
          .read(supabaseProvider)
          .rpc(
            'receive_agreement_item',
            params: {
              'item_id_input': int.parse(itemId),
              'quantity_received_input': quantity,
              'notes_input': notes,
            },
          );

      await _refreshAllProviders(agreementId);

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تم تسجيل الكمية المستلمة بنجاح'),
            backgroundColor: Colors.green,
          ),
        );
      }
      return true;
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل تسجيل الاستلام: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return false;
    } finally {
      state = false;
    }
  }

  Future<bool> addPayment({
    required BuildContext context,
    required String agreementId,
    required double amount,
    String? notes,
  }) async {
    if (state) return false;
    state = true;
    try {
      await _ref
          .read(supabaseProvider)
          .rpc(
            'add_payment',
            params: {
              'agreement_id_input': agreementId,
              'amount_input': amount,
              'notes_input': notes,
            },
          );
      await _refreshAllProviders(agreementId);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تمت إضافة الدفعة بنجاح'),
            backgroundColor: Colors.green,
          ),
        );
      }
      return true;
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل إضافة الدفعة: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return false;
    } finally {
      state = false;
    }
  }

  Future<void> updateStatus({
    required BuildContext context,
    required String agreementId,
    required String newStatus,
  }) async {
    if (state) return;
    state = true;
    try {
      await _ref
          .read(supabaseProvider)
          .rpc(
            'update_agreement_status',
            params: {
              'agreement_id_input': agreementId,
              'new_status': newStatus,
              'notes': null,
            },
          );
      await _refreshAllProviders(agreementId);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تم تحديث الحالة بنجاح'),
            backgroundColor: Colors.blue,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل تحديث الحالة: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      state = false;
    }
  }

  Future<void> postponeAgreement({
    required BuildContext context,
    required String agreementId,
    required DateTime newDate,
  }) async {
    if (state) return;
    state = true;
    try {
      await _ref
          .read(supabaseProvider)
          .rpc(
            'postpone_agreement',
            params: {
              'agreement_id_input': agreementId,
              'new_delivery_date_input': newDate.toIso8601String(),
            },
          );
      await _refreshAllProviders(agreementId);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تم تأجيل الاتفاقية بنجاح'),
            backgroundColor: Colors.blue,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل التأجيل: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      state = false;
    }
  }
}


--- FILE: lib/features/suppliers/presentation/providers/agreement_form_provider.dart ---
import 'dart:convert';
import 'dart:io';
import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:syria_store/features/suppliers/data/models/agreement_item_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

class SupplierCategory extends Equatable {
  final int id;
  final String name;
  const SupplierCategory({required this.id, required this.name});
  @override
  List<Object?> get props => [id];
}

class Supplier extends Equatable {
  final String id;
  final String name;
  const Supplier({required this.id, required this.name});
  @override
  List<Object?> get props => [id];
}

final supplierCategoriesProvider =
    FutureProvider.autoDispose<List<SupplierCategory>>((ref) async {
      final supabase = ref.watch(supabaseProvider);
      final response = await supabase
          .from('supplier_categories')
          .select('id, name')
          .order('name');
      return response
          .map((item) => SupplierCategory(id: item['id'], name: item['name']))
          .toList();
    });

final selectedCategoryProvider = StateProvider.autoDispose<SupplierCategory?>(
  (ref) => null,
);

final suppliersByCategoryProvider = FutureProvider.autoDispose<List<Supplier>>((
  ref,
) async {
  final supabase = ref.watch(supabaseProvider);
  final selectedCategory = ref.watch(selectedCategoryProvider);
  if (selectedCategory == null) return [];
  final response = await supabase
      .from('suppliers')
      .select('id, name, supplier_category_link!inner(category_id)')
      .eq('supplier_category_link.category_id', selectedCategory.id)
      .order('name');
  return response
      .map((item) => Supplier(id: item['id'], name: item['name']))
      .toList();
});

final agreementFormProvider =
    StateNotifierProvider.autoDispose<
      AgreementFormNotifier,
      List<AgreementItem>
    >((ref) {
      return AgreementFormNotifier();
    });

class AgreementFormNotifier extends StateNotifier<List<AgreementItem>> {
  AgreementFormNotifier() : super([]);
  void addItem(AgreementItem item) {
    state = [...state, item];
  }

  void removeItem(String itemId) {
    state = state.where((item) => item.id != itemId).toList();
  }

  double get grandTotal => state.fold(0.0, (sum, item) => sum + item.subtotal);

  void clear() {
    state = [];
  }
}

final addSupplierControllerProvider =
    StateNotifierProvider.autoDispose<AddSupplierController, bool>((ref) {
      return AddSupplierController(ref: ref);
    });

class AddSupplierController extends StateNotifier<bool> {
  final Ref _ref;
  AddSupplierController({required Ref ref}) : _ref = ref, super(false);
  Future<Supplier?> addSupplier({
    required BuildContext context,
    required String name,
    String? phone,
    String? address,
    required int categoryId,
  }) async {
    if (state) return null;
    state = true;
    try {
      final supabase = _ref.read(supabaseProvider);
      final newSupplierData = await supabase
          .from('suppliers')
          .insert({'name': name, 'phone_number': phone, 'address': address})
          .select()
          .single();
      final newSupplierId = newSupplierData['id'];
      await supabase.from('supplier_category_link').insert({
        'supplier_id': newSupplierId,
        'category_id': categoryId,
      });
      _ref.invalidate(suppliersByCategoryProvider);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('تمت إضافة "$name" بنجاح'),
            backgroundColor: Colors.green,
          ),
        );
      }
      return Supplier(id: newSupplierId, name: name);
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('خطأ في إضافة المورد: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return null;
    } finally {
      state = false;
    }
  }
}

final agreementControllerProvider =
    StateNotifierProvider.autoDispose<AgreementController, bool>((ref) {
      return AgreementController(ref: ref);
    });

class AgreementController extends StateNotifier<bool> {
  final Ref _ref;
  AgreementController({required Ref ref}) : _ref = ref, super(false);

  Future<bool> createFullAgreement({
    required BuildContext context,
    required String supplierId,
    String? notes,
    required List<AgreementItem> items,
    double downPayment = 0,
    required List<XFile> images,
  }) async {
    if (state) return false;
    state = true;
    try {
      final supabase = _ref.read(supabaseProvider);
      List<String> imagePaths = []; // سنحفظ المسارات هنا

      if (images.isNotEmpty) {
        final String agreementFolder =
            'public/agreements/${DateTime.now().millisecondsSinceEpoch}';
        const bucketName = 'agreement-documents';

        for (final image in images) {
          final fileName = image.name;
          final uploadPath = '$agreementFolder/$fileName';

          if (kIsWeb) {
            await supabase.storage
                .from(bucketName)
                .uploadBinary(
                  uploadPath,
                  await image.readAsBytes(),
                  fileOptions: FileOptions(contentType: image.mimeType),
                );
          } else {
            await supabase.storage
                .from(bucketName)
                .upload(uploadPath, File(image.path));
          }

          imagePaths.add(uploadPath);
        }
      }

      final itemsList = items.map((item) => item.toJson()).toList();

      await _ref
          .read(supabaseProvider)
          .rpc(
            'create_full_agreement',
            params: {
              'supplier_id_input': supplierId,
              'notes_input': notes,
              'items_jsonb_in': itemsList,
              'down_payment_input': downPayment,
              'document_urls_input': imagePaths,
            },
          );

      _ref.invalidate(agreementsProvider);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تم حفظ الاتفاقية بنجاح'),
            backgroundColor: Colors.green,
          ),
        );
      }
      return true;
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل حفظ الاتفاقية: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return false;
    } finally {
      state = false;
    }
  }
}


--- FILE: lib/features/suppliers/presentation/providers/agreement_items_provider.dart ---
// lib/features/suppliers/presentation/providers/agreement_items_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/agreement_item_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

// Provider لجلب قائمة البنود الخاصة باتفاقية معينة
final agreementItemsProvider = FutureProvider.autoDispose
    .family<List<AgreementItem>, String>((ref, agreementId) async {
      final supabase = ref.watch(supabaseProvider);
      try {
        final response = await supabase
            .from('agreement_items')
            .select()
            .eq('agreement_id', agreementId);

        return response.map((item) => AgreementItem.fromJson(item)).toList();
      } catch (e) {
        print('Error fetching agreement items: $e');
        rethrow;
      }
    });


--- FILE: lib/features/suppliers/presentation/providers/agreement_list_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:syria_store/features/suppliers/data/models/supplier_agreement_model.dart';

final supabaseProvider = Provider((ref) => Supabase.instance.client);

// Providers لحفظ حالة الفلترة (تبقى كما هي)
final searchQueryProvider = StateProvider<String>((ref) => '');
final statusFilterProvider = StateProvider<String?>((ref) => null);

// --- ** بداية التعديل: تبسيط Provider الاتفاقيات ** ---
final agreementsProvider = FutureProvider.autoDispose<List<SupplierAgreement>>((
  ref,
) async {
  final supabase = ref.watch(supabaseProvider);
  final searchQuery = ref.watch(searchQueryProvider);
  final statusFilter = ref.watch(statusFilterProvider);

  try {
    // الآن نقوم فقط باستدعاء الدالة الذكية التي أنشأناها مع تمرير الفلاتر
    final response = await supabase
        .rpc(
          'search_agreements',
          params: {'search_query': searchQuery, 'status_filter': statusFilter},
        )
        .select(
          '*, suppliers(id, name)',
        ); // وما زلنا نستطيع طلب البيانات المرتبطة

    final List<Map<String, dynamic>> data = List<Map<String, dynamic>>.from(
      response,
    );
    return data.map((item) => SupplierAgreement.fromJson(item)).toList();
  } catch (e) {
    print('Error fetching agreements: $e');
    rethrow;
  }
});
// --- ** نهاية التعديل ** ---

final agreementsBySupplierProvider = FutureProvider.autoDispose
    .family<List<SupplierAgreement>, String>((ref, supplierId) async {
      final supabase = ref.watch(supabaseProvider);
      try {
        final response = await supabase
            .from('supplier_agreements')
            .select('*, suppliers(id, name)')
            .eq('supplier_id', supplierId)
            .order('created_at', ascending: false);

        final List<Map<String, dynamic>> data = List<Map<String, dynamic>>.from(
          response,
        );
        return data.map((item) => SupplierAgreement.fromJson(item)).toList();
      } catch (e) {
        print('Error fetching agreements for supplier $supplierId: $e');
        rethrow;
      }
    });


--- FILE: lib/features/suppliers/presentation/providers/supplier_details_provider.dart ---
// lib/features/suppliers/presentation/providers/supplier_details_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/supplier_financials_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

// Provider لجلب الملخص المالي
final supplierFinancialSummaryProvider = FutureProvider.autoDispose
    .family<SupplierFinancialSummary, String>((ref, supplierId) async {
      final supabase = ref.watch(supabaseProvider);
      final response = await supabase.rpc(
        'get_supplier_financial_summary',
        params: {'supplier_id_input': supplierId},
      );
      return SupplierFinancialSummary.fromJson(response);
    });

// Provider لجلب قائمة الدفعات
final supplierPaymentsProvider = FutureProvider.autoDispose
    .family<List<PaymentModel>, String>((ref, supplierId) async {
      final supabase = ref.watch(supabaseProvider);
      // نحتاج للانضمام إلى جدول الاتفاقيات للفلترة حسب المورد
      final response = await supabase
          .from('agreement_payments')
          .select('*, supplier_agreements!inner(supplier_id)')
          .eq('supplier_agreements.supplier_id', supplierId)
          .order('payment_date', ascending: false);

      final List<Map<String, dynamic>> data = List<Map<String, dynamic>>.from(
        response,
      );
      return data.map((item) => PaymentModel.fromJson(item)).toList();
    });


--- FILE: lib/features/suppliers/presentation/providers/supplier_list_provider.dart ---
// lib/features/suppliers/presentation/providers/supplier_list_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/supplier_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

// Provider لحفظ نص البحث في صفحة الموردين
final supplierSearchQueryProvider = StateProvider<String>((ref) => '');

// Provider لجلب قائمة الموردين مع الفلترة حسب البحث
final allSuppliersProvider = FutureProvider.autoDispose<List<SupplierModel>>((
  ref,
) async {
  final supabase = ref.watch(supabaseProvider);
  final searchQuery = ref.watch(supplierSearchQueryProvider);

  try {
    // تعديل الـ select ليقرأ التصنيف من خلال الجدول الوسيط
    var query = supabase
        .from('suppliers')
        .select(
          '*, supplier_category_link!inner(*, supplier_categories(name))',
        );

    if (searchQuery.isNotEmpty) {
      // البحث في اسم المورد أو رقم الهاتف أو العنوان
      query = query.or(
        'name.ilike.%$searchQuery%,phone_number.ilike.%$searchQuery%,address.ilike.%$searchQuery%',
      );
    }

    final response = await query.order('created_at', ascending: false);
    final List<Map<String, dynamic>> data = List<Map<String, dynamic>>.from(
      response,
    );

    return data.map((item) => SupplierModel.fromJson(item)).toList();
  } catch (e) {
    print('Error fetching all suppliers: $e');
    rethrow;
  }
});


--- FILE: lib/features/suppliers/presentation/widgets/add_item_dialog.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart' hide TextDirection;
import 'package:syria_store/features/suppliers/data/models/agreement_item_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_form_provider.dart';
import 'package:uuid/uuid.dart';

class AddItemDialog extends ConsumerStatefulWidget {
  const AddItemDialog({super.key});
  @override
  ConsumerState<AddItemDialog> createState() => _AddItemDialogState();
}

class _AddItemDialogState extends ConsumerState<AddItemDialog> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _quantityController = TextEditingController();
  final _priceController = TextEditingController();
  DateTime? _selectedDate;

  @override
  void dispose() {
    _nameController.dispose();
    _quantityController.dispose();
    _priceController.dispose();
    super.dispose();
  }

  Future<void> _pickDate() async {
    final pickedDate = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now().add(const Duration(days: 1)),
      firstDate: DateTime.now(),
      lastDate: DateTime(2101),
    );
    if (pickedDate != null) {
      setState(() => _selectedDate = pickedDate);
    }
  }

  void _onSave() {
    if (_formKey.currentState!.validate()) {
      final newItem = AgreementItem(
        id: const Uuid().v4(),
        itemName: _nameController.text.trim(),
        totalQuantity: int.parse(_quantityController.text.trim()),
        unitPrice: double.parse(_priceController.text.trim()),
        expectedDeliveryDate: _selectedDate!,
        receivedQuantitySoFar: 0,
      );
      ref.read(agreementFormProvider.notifier).addItem(newItem);
      Navigator.of(context).pop();
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('إضافة بند جديد'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(labelText: 'اسم البند/الصنف'),
                validator: (val) =>
                    (val == null || val.isEmpty) ? 'الحقل مطلوب' : null,
              ),
              TextFormField(
                controller: _quantityController,
                decoration: const InputDecoration(labelText: 'الكمية'),
                keyboardType: TextInputType.number,
                validator: (val) =>
                    (val == null || val.isEmpty) ? 'الحقل مطلوب' : null,
              ),
              TextFormField(
                controller: _priceController,
                decoration: const InputDecoration(
                  labelText: 'سعر الوحدة',
                  suffixText: '\$',
                ),
                keyboardType: const TextInputType.numberWithOptions(
                  decimal: true,
                ),
                validator: (val) =>
                    (val == null || val.isEmpty) ? 'الحقل مطلوب' : null,
              ),
              TextFormField(
                readOnly: true,
                controller: TextEditingController(
                  text: _selectedDate == null
                      ? ''
                      : DateFormat('yyyy/MM/dd').format(_selectedDate!),
                ),
                decoration: const InputDecoration(
                  labelText: 'تاريخ تسليم البند',
                  hintText: 'اختر تاريخًا',
                ),
                onTap: _pickDate,
                validator: (value) =>
                    _selectedDate == null ? 'الرجاء اختيار تاريخ' : null,
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(onPressed: _onSave, child: const Text('إضافة')),
      ],
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/add_payment_dialog.dart ---
// lib/features/suppliers/presentation/widgets/add_payment_dialog.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_details_provider.dart';

class AddPaymentDialog extends ConsumerStatefulWidget {
  final String agreementId;
  const AddPaymentDialog({super.key, required this.agreementId});

  @override
  ConsumerState<AddPaymentDialog> createState() => _AddPaymentDialogState();
}

class _AddPaymentDialogState extends ConsumerState<AddPaymentDialog> {
  final _formKey = GlobalKey<FormState>();
  final _amountController = TextEditingController();
  final _notesController = TextEditingController();

  @override
  void dispose() {
    _amountController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  void _onSave() {
    if (_formKey.currentState!.validate()) {
      final amount = double.tryParse(_amountController.text);
      if (amount == null) return;

      ref
          .read(updateAgreementStatusControllerProvider.notifier)
          .addPayment(
            context: context,
            agreementId: widget.agreementId,
            amount: amount,
            notes: _notesController.text.trim(),
          )
          .then((success) {
            if (success && mounted) {
              Navigator.of(context).pop();
            }
          });
    }
  }

  @override
  Widget build(BuildContext context) {
    final isSaving = ref.watch(updateAgreementStatusControllerProvider);
    return AlertDialog(
      title: const Text('إضافة دفعة جديدة'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              controller: _amountController,
              decoration: const InputDecoration(
                labelText: 'مبلغ الدفعة',
                prefixText: '\$ ',
              ),
              keyboardType: const TextInputType.numberWithOptions(
                decimal: true,
              ),
              validator: (val) {
                if (val == null || val.isEmpty) return 'الحقل مطلوب';
                if (double.tryParse(val) == null)
                  return 'الرجاء إدخال رقم صحيح';
                if (double.tryParse(val)! <= 0)
                  return 'يجب أن يكون المبلغ أكبر من صفر';
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _notesController,
              decoration: const InputDecoration(labelText: 'ملاحظات (اختياري)'),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(
          onPressed: isSaving ? null : _onSave,
          child: isSaving
              ? const SizedBox(
                  height: 20,
                  width: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
              : const Text('حفظ الدفعة'),
        ),
      ],
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/agreement_card.dart ---
// lib/features/suppliers/presentation/widgets/agreement_card.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart' hide TextDirection;
import 'package:syria_store/features/suppliers/data/models/supplier_agreement_model.dart';

class AgreementCard extends StatelessWidget {
  final SupplierAgreement agreement;
  const AgreementCard({super.key, required this.agreement});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    int? daysRemaining;
    if (agreement.expectedDeliveryDate != null) {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final deliveryDate = DateTime(
        agreement.expectedDeliveryDate!.year,
        agreement.expectedDeliveryDate!.month,
        agreement.expectedDeliveryDate!.day,
      );
      daysRemaining = deliveryDate.difference(today).inDays;
    }
    final Map<String, dynamic> statusInfo = _getStatusInfo(
      agreement.status,
      theme,
    );

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      elevation: 4,
      shadowColor: Colors.black.withOpacity(0.1),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () {
          context.push('/supplier-agreements/details/${agreement.id}');
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Expanded(
                    child: InkWell(
                      onTap: () {
                        if (agreement.supplierId != null) {
                          context.push(
                            '/suppliers/${agreement.supplierId}',
                            extra: agreement.supplierName,
                          );
                        }
                      },
                      child: Text(
                        agreement.supplierName ?? 'مورد غير محدد',
                        style: theme.textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                          decoration: TextDecoration.underline,
                          decorationColor: Colors.blue.withOpacity(0.5),
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 10,
                      vertical: 5,
                    ),
                    decoration: BoxDecoration(
                      color: statusInfo['color'].withOpacity(0.1),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          statusInfo['icon'],
                          color: statusInfo['color'],
                          size: 16,
                        ),
                        const SizedBox(width: 6),
                        Text(
                          statusInfo['text'],
                          style: TextStyle(
                            color: statusInfo['color'],
                            fontWeight: FontWeight.w600,
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const Divider(height: 24),
              Text(
                agreement.agreementDetails.isNotEmpty
                    ? agreement.agreementDetails
                    : 'لا توجد تفاصيل للملاحظات.',
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: Colors.grey.shade700,
                  height: 1.5,
                ),
              ),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  if (daysRemaining != null &&
                      daysRemaining >= 0 &&
                      agreement.status == 'pending_delivery')
                    _buildInfoChip(
                      theme,
                      Icons.hourglass_bottom_outlined,
                      'باقي $daysRemaining يوم',
                      color: daysRemaining < 7
                          ? Colors.red.shade700
                          : theme.colorScheme.primary,
                    ),
                  const Spacer(),
                  if (agreement.expectedDeliveryDate != null)
                    _buildInfoChip(
                      theme,
                      Icons.calendar_today_outlined,
                      DateFormat(
                        'yyyy/MM/dd',
                        'ar',
                      ).format(agreement.expectedDeliveryDate!),
                    ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Map<String, dynamic> _getStatusInfo(String status, ThemeData theme) {
    switch (status) {
      case 'pending_delivery':
        return {
          'color': Colors.orange.shade700,
          'icon': Icons.hourglass_top,
          'text': 'قيد التسليم',
        };
      case 'completed':
        return {
          'color': Colors.green.shade700,
          'icon': Icons.check_circle,
          'text': 'مكتمل',
        };
      case 'delayed':
        return {
          'color': Colors.red.shade700,
          'icon': Icons.error,
          'text': 'متأخر',
        };
      case 'cancelled':
        return {
          'color': Colors.grey.shade700,
          'icon': Icons.cancel,
          'text': 'ملغي',
        };
      default:
        return {'color': Colors.grey, 'icon': Icons.help, 'text': 'غير معروف'};
    }
  }

  Widget _buildInfoChip(
    ThemeData theme,
    IconData icon,
    String label, {
    Color? color,
  }) {
    return Row(
      children: [
        Icon(icon, size: 18, color: color ?? theme.textTheme.bodySmall?.color),
        const SizedBox(width: 6),
        Text(
          label,
          style: theme.textTheme.bodyMedium?.copyWith(
            color: color,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/private_storage_image.dart ---
// lib/features/suppliers/presentation/widgets/private_storage_image.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

class PrivateStorageImage extends ConsumerWidget {
  final String imagePath;
  const PrivateStorageImage({super.key, required this.imagePath});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return FutureBuilder<String>(
      future: ref
          .read(supabaseProvider)
          .storage
          .from('agreement-documents')
          .createSignedUrl(imagePath, 60), // 60 ثانية صلاحية للرابط
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {
          return const Tooltip(
            message: 'فشل تحميل الصورة',
            child: Icon(Icons.error_outline, color: Colors.red),
          );
        }

        final signedUrl = snapshot.data!;
        return ClipRRect(
          borderRadius: BorderRadius.circular(10),
          child: Image.network(
            signedUrl,
            width: 150,
            fit: BoxFit.cover,
            loadingBuilder: (context, child, progress) => progress == null
                ? child
                : const Center(child: CircularProgressIndicator()),
            errorBuilder: (context, error, stack) => const Tooltip(
              message: 'فشل تحميل الصورة من الرابط',
              child: Icon(Icons.broken_image_outlined, color: Colors.red),
            ),
          ),
        );
      },
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/receive_item_dialog.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/agreement_item_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_details_provider.dart';

class ReceiveItemDialog extends ConsumerStatefulWidget {
  final AgreementItem item;
  final String agreementId;

  const ReceiveItemDialog({
    super.key,
    required this.item,
    required this.agreementId,
  });

  @override
  ConsumerState<ReceiveItemDialog> createState() => _ReceiveItemDialogState();
}

class _ReceiveItemDialogState extends ConsumerState<ReceiveItemDialog> {
  final _formKey = GlobalKey<FormState>();
  final _quantityController = TextEditingController();
  final _notesController = TextEditingController();

  @override
  void dispose() {
    _quantityController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  void _onSave() {
    if (_formKey.currentState!.validate()) {
      final quantity = int.tryParse(_quantityController.text);
      if (quantity == null) return;

      ref
          .read(updateAgreementStatusControllerProvider.notifier)
          .receiveItems(
            context: context,
            itemId: widget.item.id,
            agreementId: widget.agreementId,
            quantity: quantity,
            notes: _notesController.text.trim(),
          )
          .then((success) {
            if (success && mounted) {
              Navigator.of(context).pop();
            }
          });
    }
  }

  @override
  Widget build(BuildContext context) {
    final isSaving = ref.watch(updateAgreementStatusControllerProvider);
    final remainingQuantity =
        widget.item.totalQuantity - widget.item.receivedQuantitySoFar;

    return AlertDialog(
      title: Text('استلام: ${widget.item.itemName}'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('الكمية المطلوبة: ${widget.item.totalQuantity}'),
            Text('الكمية المستلمة: ${widget.item.receivedQuantitySoFar}'),
            Text(
              'الكمية المتبقية: $remainingQuantity',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            TextFormField(
              controller: _quantityController,
              decoration: const InputDecoration(
                labelText: 'الكمية المستلمة الآن',
              ),
              keyboardType: TextInputType.number,
              validator: (val) {
                if (val == null || val.isEmpty) return 'الحقل مطلوب';
                final quantity = int.tryParse(val);
                if (quantity == null) return 'الرجاء إدخال رقم صحيح';
                if (quantity <= 0) return 'يجب أن تكون الكمية أكبر من صفر';
                if (quantity > remainingQuantity)
                  return 'لا يمكن استلام كمية أكبر من المتبقية';
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _notesController,
              decoration: const InputDecoration(labelText: 'ملاحظات (اختياري)'),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(
          onPressed: isSaving ? null : _onSave,
          child: isSaving
              ? const SizedBox(
                  height: 20,
                  width: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
              : const Text('تأكيد الاستلام'),
        ),
      ],
    );
  }
}


--- FILE: lib/main.dart ---
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/app/routes/app_router.dart';
import 'package:syria_store/core/env/env.dart';
import 'package:syria_store/core/theme/app_theme.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  // استخدام runZonedGuarded لضمان التقاط جميع الأخطاء
  runZonedGuarded<Future<void>>(
    () async {
      WidgetsFlutterBinding.ensureInitialized();

      // --- معالج أخطاء Flutter ---
      // يلتقط الأخطاء التي تحدث داخل إطار عمل Flutter (أثناء بناء الواجهات، التخطيط، الرسم)
      FlutterError.onError = (FlutterErrorDetails details) {
        // طباعة الخطأ وتفاصيله في الكونسول
        FlutterError.dumpErrorToConsole(details);
        // يمكنك هنا إرسال الخطأ إلى خدمة مراقبة مثل Sentry أو Firebase Crashlytics
      };

      await Supabase.initialize(
        url: Env.supabaseUrl,
        anonKey: Env.supabaseAnonKey,
      );

      runApp(const ProviderScope(child: MyApp()));
    },
    (error, stack) {
      // --- معالج الأخطاء الشامل لـ Dart ---
      // يلتقط الأخطاء التي تحدث خارج إطار عمل Flutter (مثل الأخطاء في async gaps)
      debugPrint('Caught Dart Error: $error');
      debugPrint('Stack trace: $stack');
      // يمكنك هنا أيضًا إرسال الخطأ إلى خدمة المراقبة
    },
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: 'مفروشات دمشق',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,

      routerConfig: goRouter,

      localizationsDelegates: const [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('ar', ''), // Arabic
        Locale('en', ''), // English
      ],
      locale: const Locale('ar', ''),
    );
  }
}


--- FILE: test/widget_test.dart (Test File) ---
// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:syria_store/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}


--- FILE: lib/features/suppliers/presentation/pages/supplier_agreements_page.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:syria_store/app/widgets/app_drawer.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';
import 'package:syria_store/features/suppliers/presentation/widgets/agreement_card.dart';

class SupplierAgreementsPage extends ConsumerStatefulWidget {
  const SupplierAgreementsPage({super.key});

  @override
  ConsumerState<SupplierAgreementsPage> createState() =>
      _SupplierAgreementsPageState();
}

class _SupplierAgreementsPageState
    extends ConsumerState<SupplierAgreementsPage> {
  final _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    // مزامنة حقل البحث مع الـ provider عند بدء التشغيل
    _searchController.text = ref.read(searchQueryProvider);
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final agreementsAsync = ref.watch(agreementsProvider);
    final selectedStatus = ref.watch(statusFilterProvider);

    return Scaffold(
      drawer: const AppDrawer(),
      appBar: AppBar(
        title: const Text('اتفاقيات الموردين'),
        actions: [
          IconButton(
            onPressed: () => context.push('/add-agreement'),
            icon: const Icon(Icons.add_circle_outline),
            tooltip: 'إضافة اتفاقية جديدة',
          ),
        ],
      ),
      body: Column(
        children: [
          // --- ** بداية الإضافة: شريط البحث والفلترة ** ---
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              children: [
                TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: 'ابحث عن مورد أو تفاصيل اتفاقية...',
                    prefixIcon: const Icon(Icons.search),
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(30),
                      borderSide: BorderSide.none,
                    ),
                    filled: true,
                    fillColor: Theme.of(
                      context,
                    ).colorScheme.surfaceVariant.withOpacity(0.5),
                  ),
                  onChanged: (value) {
                    ref.read(searchQueryProvider.notifier).state = value;
                  },
                ),
                const SizedBox(height: 12),
                SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      FilterChip(
                        label: const Text('الكل'),
                        selected: selectedStatus == null,
                        onSelected: (_) =>
                            ref.read(statusFilterProvider.notifier).state =
                                null,
                      ),
                      const SizedBox(width: 8),
                      FilterChip(
                        label: const Text('قيد التسليم'),
                        selected: selectedStatus == 'pending_delivery',
                        onSelected: (_) =>
                            ref.read(statusFilterProvider.notifier).state =
                                'pending_delivery',
                        backgroundColor: Colors.orange.withOpacity(0.1),
                        selectedColor: Colors.orange.shade700,
                      ),
                      const SizedBox(width: 8),
                      FilterChip(
                        label: const Text('مكتمل'),
                        selected: selectedStatus == 'completed',
                        onSelected: (_) =>
                            ref.read(statusFilterProvider.notifier).state =
                                'completed',
                        backgroundColor: Colors.green.withOpacity(0.1),
                        selectedColor: Colors.green.shade700,
                      ),
                      const SizedBox(width: 8),
                      FilterChip(
                        label: const Text('ملغي'),
                        selected: selectedStatus == 'cancelled',
                        onSelected: (_) =>
                            ref.read(statusFilterProvider.notifier).state =
                                'cancelled',
                        backgroundColor: Colors.grey.withOpacity(0.1),
                        selectedColor: Colors.grey.shade700,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // --- ** نهاية الإضافة ** ---
          Expanded(
            child: RefreshIndicator(
              onRefresh: () => ref.refresh(agreementsProvider.future),
              child: agreementsAsync.when(
                data: (agreements) {
                  if (agreements.isEmpty) {
                    return LayoutBuilder(
                      builder: (context, constraints) => SingleChildScrollView(
                        physics: const AlwaysScrollableScrollPhysics(),
                        child: ConstrainedBox(
                          constraints: BoxConstraints(
                            minHeight: constraints.maxHeight,
                          ),
                          child: const Center(
                            child: Text('لا توجد اتفاقيات تطابق هذا البحث.'),
                          ),
                        ),
                      ),
                    );
                  }
                  return ListView.builder(
                    physics: const AlwaysScrollableScrollPhysics(),
                    itemCount: agreements.length,
                    itemBuilder: (context, index) =>
                        AgreementCard(agreement: agreements[index]),
                  );
                },
                loading: () => const Center(child: CircularProgressIndicator()),
                error: (err, stack) =>
                    Center(child: Text('حدث خطأ: ${err.toString()}')),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


--- FILE: lib/features/suppliers/presentation/pages/supplier_details_page.dart ---
// lib/features/suppliers/presentation/pages/supplier_details_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';
import 'package:syria_store/features/suppliers/presentation/providers/supplier_details_provider.dart';
import 'package:syria_store/features/suppliers/presentation/widgets/agreement_card.dart';

class SupplierDetailsPage extends ConsumerWidget {
  final String supplierId;
  final String supplierName;

  const SupplierDetailsPage({
    super.key,
    required this.supplierId,
    required this.supplierName,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final summaryAsync = ref.watch(
      supplierFinancialSummaryProvider(supplierId),
    );
    final paymentsAsync = ref.watch(supplierPaymentsProvider(supplierId));
    final agreementsAsync = ref.watch(agreementsBySupplierProvider(supplierId));
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(title: Text('سجل: $supplierName')),
      body: RefreshIndicator(
        onRefresh: () async {
          ref.invalidate(supplierFinancialSummaryProvider(supplierId));
          ref.invalidate(supplierPaymentsProvider(supplierId));
          ref.invalidate(agreementsBySupplierProvider(supplierId));
        },
        child: SingleChildScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              summaryAsync.when(
                data: (summary) => Card(
                  elevation: 4,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        Text(
                          'الملخص المالي',
                          style: theme.textTheme.titleLarge,
                        ),
                        const Divider(height: 24),
                        _buildFinancialSummaryRow(
                          'إجمالي الاتفاقيات (له):',
                          '\$${summary.totalAgreements.toStringAsFixed(2)}',
                          Colors.red,
                        ),
                        _buildFinancialSummaryRow(
                          'إجمالي الدفعات (لنا):',
                          '\$${summary.totalPaid.toStringAsFixed(2)}',
                          Colors.green,
                        ),
                        const Divider(),
                        _buildFinancialSummaryRow(
                          'الرصيد النهائي:',
                          '\$${summary.balance.toStringAsFixed(2)}',
                          Theme.of(context).primaryColor,
                          isTotal: true,
                        ),
                      ],
                    ),
                  ),
                ),
                loading: () => const Center(child: CircularProgressIndicator()),
                error: (e, s) => Text('خطأ في جلب الملخص المالي: $e'),
              ),
              const SizedBox(height: 24),
              Text('آخر الدفعات', style: theme.textTheme.titleLarge),
              const Divider(),
              paymentsAsync.when(
                data: (payments) {
                  if (payments.isEmpty)
                    return const Center(
                      child: Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Text('لا توجد دفعات مسجلة.'),
                      ),
                    );
                  return ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: payments.length,
                    itemBuilder: (context, index) {
                      final payment = payments[index];
                      return ListTile(
                        leading: const Icon(Icons.payment),
                        title: Text(
                          'دفعة بقيمة \$${payment.amount.toStringAsFixed(2)}',
                        ),
                        subtitle: Text(
                          'بتاريخ: ${DateFormat('yyyy/MM/dd').format(payment.paymentDate)}',
                        ),
                        onTap: () => context.push(
                          '/supplier-agreements/details/${payment.agreementId}',
                        ),
                      );
                    },
                  );
                },
                loading: () => const SizedBox.shrink(),
                error: (e, s) => Text('خطأ في جلب الدفعات: $e'),
              ),
              const SizedBox(height: 24),
              Text('كل الاتفاقيات', style: theme.textTheme.titleLarge),
              const Divider(),
              agreementsAsync.when(
                data: (agreements) {
                  if (agreements.isEmpty)
                    return const Center(
                      child: Padding(
                        padding: EdgeInsets.all(16.0),
                        child: Text('لا توجد اتفاقيات لهذا المورد.'),
                      ),
                    );
                  return ListView.builder(
                    shrinkWrap: true,
                    physics: const NeverScrollableScrollPhysics(),
                    itemCount: agreements.length,
                    itemBuilder: (context, index) {
                      return AgreementCard(agreement: agreements[index]);
                    },
                  );
                },
                loading: () => const SizedBox.shrink(),
                error: (e, s) => Text('خطأ في جلب الاتفاقيات: $e'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFinancialSummaryRow(
    String title,
    String amount,
    Color color, {
    bool isTotal = false,
  }) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            title,
            style: TextStyle(
              fontSize: 16,
              color: isTotal ? Colors.black : Colors.grey.shade700,
            ),
          ),
          Text(
            amount,
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      ),
    );
  }
}


--- FILE: lib/features/suppliers/presentation/providers/agreement_details_provider.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/supplier_agreement_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_items_provider.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

final agreementDetailsProvider = FutureProvider.autoDispose
    .family<SupplierAgreement?, String>((ref, agreementId) async {
      final supabase = ref.watch(supabaseProvider);
      try {
        final response = await supabase
            .from('supplier_agreements')
            .select('*, suppliers(id, name)')
            .eq('id', agreementId)
            .single();
        return SupplierAgreement.fromJson(response);
      } catch (e) {
        debugPrint("Error fetching agreement details: $e");
        return null;
      }
    });

final updateAgreementStatusControllerProvider =
    StateNotifierProvider.autoDispose<UpdateAgreementStatusController, bool>((
      ref,
    ) {
      return UpdateAgreementStatusController(ref: ref);
    });

class UpdateAgreementStatusController extends StateNotifier<bool> {
  final Ref _ref;
  UpdateAgreementStatusController({required Ref ref})
    : _ref = ref,
      super(false);

  Future<void> _refreshAllProviders(String agreementId) async {
    _ref.invalidate(agreementsProvider);
    _ref.invalidate(agreementDetailsProvider(agreementId));
    _ref.invalidate(agreementItemsProvider(agreementId));
    try {
      final agreement = await _ref.read(
        agreementDetailsProvider(agreementId).future,
      );
      if (agreement?.supplierId != null) {
        _ref.invalidate(agreementsBySupplierProvider(agreement!.supplierId!));
      }
    } catch (_) {}
  }

  Future<bool> receiveItems({
    required BuildContext context,
    required String itemId,
    required String agreementId,
    required int quantity,
    String? notes,
  }) async {
    if (state) return false;
    state = true;
    try {
      await _ref
          .read(supabaseProvider)
          .rpc(
            'receive_agreement_item',
            params: {
              'item_id_input': int.parse(itemId),
              'quantity_received_input': quantity,
              'notes_input': notes,
            },
          );

      await _refreshAllProviders(agreementId);

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تم تسجيل الكمية المستلمة بنجاح'),
            backgroundColor: Colors.green,
          ),
        );
      }
      return true;
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل تسجيل الاستلام: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return false;
    } finally {
      state = false;
    }
  }

  Future<bool> addPayment({
    required BuildContext context,
    required String agreementId,
    required double amount,
    String? notes,
  }) async {
    if (state) return false;
    state = true;
    try {
      await _ref
          .read(supabaseProvider)
          .rpc(
            'add_payment',
            params: {
              'agreement_id_input': agreementId,
              'amount_input': amount,
              'notes_input': notes,
            },
          );
      await _refreshAllProviders(agreementId);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تمت إضافة الدفعة بنجاح'),
            backgroundColor: Colors.green,
          ),
        );
      }
      return true;
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل إضافة الدفعة: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return false;
    } finally {
      state = false;
    }
  }

  Future<void> updateStatus({
    required BuildContext context,
    required String agreementId,
    required String newStatus,
  }) async {
    if (state) return;
    state = true;
    try {
      await _ref
          .read(supabaseProvider)
          .rpc(
            'update_agreement_status',
            params: {
              'agreement_id_input': agreementId,
              'new_status': newStatus,
              'notes': null,
            },
          );
      await _refreshAllProviders(agreementId);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تم تحديث الحالة بنجاح'),
            backgroundColor: Colors.blue,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل تحديث الحالة: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      state = false;
    }
  }

  Future<void> postponeAgreement({
    required BuildContext context,
    required String agreementId,
    required DateTime newDate,
  }) async {
    if (state) return;
    state = true;
    try {
      await _ref
          .read(supabaseProvider)
          .rpc(
            'postpone_agreement',
            params: {
              'agreement_id_input': agreementId,
              'new_delivery_date_input': newDate.toIso8601String(),
            },
          );
      await _refreshAllProviders(agreementId);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تم تأجيل الاتفاقية بنجاح'),
            backgroundColor: Colors.blue,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل التأجيل: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      state = false;
    }
  }
}


--- FILE: lib/features/suppliers/presentation/providers/agreement_form_provider.dart ---
import 'dart:convert';
import 'dart:io';
import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:image_picker/image_picker.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:syria_store/features/suppliers/data/models/agreement_item_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

class SupplierCategory extends Equatable {
  final int id;
  final String name;
  const SupplierCategory({required this.id, required this.name});
  @override
  List<Object?> get props => [id];
}

class Supplier extends Equatable {
  final String id;
  final String name;
  const Supplier({required this.id, required this.name});
  @override
  List<Object?> get props => [id];
}

final supplierCategoriesProvider =
    FutureProvider.autoDispose<List<SupplierCategory>>((ref) async {
      final supabase = ref.watch(supabaseProvider);
      final response = await supabase
          .from('supplier_categories')
          .select('id, name')
          .order('name');
      return response
          .map((item) => SupplierCategory(id: item['id'], name: item['name']))
          .toList();
    });

final selectedCategoryProvider = StateProvider.autoDispose<SupplierCategory?>(
  (ref) => null,
);

final suppliersByCategoryProvider = FutureProvider.autoDispose<List<Supplier>>((
  ref,
) async {
  final supabase = ref.watch(supabaseProvider);
  final selectedCategory = ref.watch(selectedCategoryProvider);
  if (selectedCategory == null) return [];
  final response = await supabase
      .from('suppliers')
      .select('id, name, supplier_category_link!inner(category_id)')
      .eq('supplier_category_link.category_id', selectedCategory.id)
      .order('name');
  return response
      .map((item) => Supplier(id: item['id'], name: item['name']))
      .toList();
});

final agreementFormProvider =
    StateNotifierProvider.autoDispose<
      AgreementFormNotifier,
      List<AgreementItem>
    >((ref) {
      return AgreementFormNotifier();
    });

class AgreementFormNotifier extends StateNotifier<List<AgreementItem>> {
  AgreementFormNotifier() : super([]);
  void addItem(AgreementItem item) {
    state = [...state, item];
  }

  void removeItem(String itemId) {
    state = state.where((item) => item.id != itemId).toList();
  }

  double get grandTotal => state.fold(0.0, (sum, item) => sum + item.subtotal);

  void clear() {
    state = [];
  }
}

final addSupplierControllerProvider =
    StateNotifierProvider.autoDispose<AddSupplierController, bool>((ref) {
      return AddSupplierController(ref: ref);
    });

class AddSupplierController extends StateNotifier<bool> {
  final Ref _ref;
  AddSupplierController({required Ref ref}) : _ref = ref, super(false);
  Future<Supplier?> addSupplier({
    required BuildContext context,
    required String name,
    String? phone,
    String? address,
    required int categoryId,
  }) async {
    if (state) return null;
    state = true;
    try {
      final supabase = _ref.read(supabaseProvider);
      final newSupplierData = await supabase
          .from('suppliers')
          .insert({'name': name, 'phone_number': phone, 'address': address})
          .select()
          .single();
      final newSupplierId = newSupplierData['id'];
      await supabase.from('supplier_category_link').insert({
        'supplier_id': newSupplierId,
        'category_id': categoryId,
      });
      _ref.invalidate(suppliersByCategoryProvider);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('تمت إضافة "$name" بنجاح'),
            backgroundColor: Colors.green,
          ),
        );
      }
      return Supplier(id: newSupplierId, name: name);
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('خطأ في إضافة المورد: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return null;
    } finally {
      state = false;
    }
  }
}

final agreementControllerProvider =
    StateNotifierProvider.autoDispose<AgreementController, bool>((ref) {
      return AgreementController(ref: ref);
    });

class AgreementController extends StateNotifier<bool> {
  final Ref _ref;
  AgreementController({required Ref ref}) : _ref = ref, super(false);

  Future<bool> createFullAgreement({
    required BuildContext context,
    required String supplierId,
    String? notes,
    required List<AgreementItem> items,
    double downPayment = 0,
    required List<XFile> images,
  }) async {
    if (state) return false;
    state = true;
    try {
      final supabase = _ref.read(supabaseProvider);
      List<String> imagePaths = []; // سنحفظ المسارات هنا

      if (images.isNotEmpty) {
        final String agreementFolder =
            'public/agreements/${DateTime.now().millisecondsSinceEpoch}';
        const bucketName = 'agreement-documents';

        for (final image in images) {
          final fileName = image.name;
          final uploadPath = '$agreementFolder/$fileName';

          if (kIsWeb) {
            await supabase.storage
                .from(bucketName)
                .uploadBinary(
                  uploadPath,
                  await image.readAsBytes(),
                  fileOptions: FileOptions(contentType: image.mimeType),
                );
          } else {
            await supabase.storage
                .from(bucketName)
                .upload(uploadPath, File(image.path));
          }

          imagePaths.add(uploadPath);
        }
      }

      final itemsList = items.map((item) => item.toJson()).toList();

      await _ref
          .read(supabaseProvider)
          .rpc(
            'create_full_agreement',
            params: {
              'supplier_id_input': supplierId,
              'notes_input': notes,
              'items_jsonb_in': itemsList,
              'down_payment_input': downPayment,
              'document_urls_input': imagePaths,
            },
          );

      _ref.invalidate(agreementsProvider);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('تم حفظ الاتفاقية بنجاح'),
            backgroundColor: Colors.green,
          ),
        );
      }
      return true;
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('فشل حفظ الاتفاقية: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
      return false;
    } finally {
      state = false;
    }
  }
}


--- FILE: lib/features/suppliers/presentation/providers/agreement_items_provider.dart ---
// lib/features/suppliers/presentation/providers/agreement_items_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/agreement_item_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

// Provider لجلب قائمة البنود الخاصة باتفاقية معينة
final agreementItemsProvider = FutureProvider.autoDispose
    .family<List<AgreementItem>, String>((ref, agreementId) async {
      final supabase = ref.watch(supabaseProvider);
      try {
        final response = await supabase
            .from('agreement_items')
            .select()
            .eq('agreement_id', agreementId);

        return response.map((item) => AgreementItem.fromJson(item)).toList();
      } catch (e) {
        print('Error fetching agreement items: $e');
        rethrow;
      }
    });


--- FILE: lib/features/suppliers/presentation/providers/agreement_list_provider.dart ---
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:syria_store/features/suppliers/data/models/supplier_agreement_model.dart';

final supabaseProvider = Provider((ref) => Supabase.instance.client);

// Providers لحفظ حالة الفلترة (تبقى كما هي)
final searchQueryProvider = StateProvider<String>((ref) => '');
final statusFilterProvider = StateProvider<String?>((ref) => null);

// --- ** بداية التعديل: تبسيط Provider الاتفاقيات ** ---
final agreementsProvider = FutureProvider.autoDispose<List<SupplierAgreement>>((
  ref,
) async {
  final supabase = ref.watch(supabaseProvider);
  final searchQuery = ref.watch(searchQueryProvider);
  final statusFilter = ref.watch(statusFilterProvider);

  try {
    // الآن نقوم فقط باستدعاء الدالة الذكية التي أنشأناها مع تمرير الفلاتر
    final response = await supabase
        .rpc(
          'search_agreements',
          params: {'search_query': searchQuery, 'status_filter': statusFilter},
        )
        .select(
          '*, suppliers(id, name)',
        ); // وما زلنا نستطيع طلب البيانات المرتبطة

    final List<Map<String, dynamic>> data = List<Map<String, dynamic>>.from(
      response,
    );
    return data.map((item) => SupplierAgreement.fromJson(item)).toList();
  } catch (e) {
    print('Error fetching agreements: $e');
    rethrow;
  }
});
// --- ** نهاية التعديل ** ---

final agreementsBySupplierProvider = FutureProvider.autoDispose
    .family<List<SupplierAgreement>, String>((ref, supplierId) async {
      final supabase = ref.watch(supabaseProvider);
      try {
        final response = await supabase
            .from('supplier_agreements')
            .select('*, suppliers(id, name)')
            .eq('supplier_id', supplierId)
            .order('created_at', ascending: false);

        final List<Map<String, dynamic>> data = List<Map<String, dynamic>>.from(
          response,
        );
        return data.map((item) => SupplierAgreement.fromJson(item)).toList();
      } catch (e) {
        print('Error fetching agreements for supplier $supplierId: $e');
        rethrow;
      }
    });


--- FILE: lib/features/suppliers/presentation/providers/supplier_details_provider.dart ---
// lib/features/suppliers/presentation/providers/supplier_details_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/supplier_financials_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

// Provider لجلب الملخص المالي
final supplierFinancialSummaryProvider = FutureProvider.autoDispose
    .family<SupplierFinancialSummary, String>((ref, supplierId) async {
      final supabase = ref.watch(supabaseProvider);
      final response = await supabase.rpc(
        'get_supplier_financial_summary',
        params: {'supplier_id_input': supplierId},
      );
      return SupplierFinancialSummary.fromJson(response);
    });

// Provider لجلب قائمة الدفعات
final supplierPaymentsProvider = FutureProvider.autoDispose
    .family<List<PaymentModel>, String>((ref, supplierId) async {
      final supabase = ref.watch(supabaseProvider);
      // نحتاج للانضمام إلى جدول الاتفاقيات للفلترة حسب المورد
      final response = await supabase
          .from('agreement_payments')
          .select('*, supplier_agreements!inner(supplier_id)')
          .eq('supplier_agreements.supplier_id', supplierId)
          .order('payment_date', ascending: false);

      final List<Map<String, dynamic>> data = List<Map<String, dynamic>>.from(
        response,
      );
      return data.map((item) => PaymentModel.fromJson(item)).toList();
    });


--- FILE: lib/features/suppliers/presentation/providers/supplier_list_provider.dart ---
// lib/features/suppliers/presentation/providers/supplier_list_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/supplier_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

// Provider لحفظ نص البحث في صفحة الموردين
final supplierSearchQueryProvider = StateProvider<String>((ref) => '');

// Provider لجلب قائمة الموردين مع الفلترة حسب البحث
final allSuppliersProvider = FutureProvider.autoDispose<List<SupplierModel>>((
  ref,
) async {
  final supabase = ref.watch(supabaseProvider);
  final searchQuery = ref.watch(supplierSearchQueryProvider);

  try {
    // تعديل الـ select ليقرأ التصنيف من خلال الجدول الوسيط
    var query = supabase
        .from('suppliers')
        .select(
          '*, supplier_category_link!inner(*, supplier_categories(name))',
        );

    if (searchQuery.isNotEmpty) {
      // البحث في اسم المورد أو رقم الهاتف أو العنوان
      query = query.or(
        'name.ilike.%$searchQuery%,phone_number.ilike.%$searchQuery%,address.ilike.%$searchQuery%',
      );
    }

    final response = await query.order('created_at', ascending: false);
    final List<Map<String, dynamic>> data = List<Map<String, dynamic>>.from(
      response,
    );

    return data.map((item) => SupplierModel.fromJson(item)).toList();
  } catch (e) {
    print('Error fetching all suppliers: $e');
    rethrow;
  }
});


--- FILE: lib/features/suppliers/presentation/widgets/add_item_dialog.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart' hide TextDirection;
import 'package:syria_store/features/products/data/models/product_model.dart';
import 'package:syria_store/features/suppliers/data/models/agreement_item_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_form_provider.dart';
import 'package:syria_store/features/suppliers/presentation/widgets/select_product_dialog.dart'; // ملف جديد سنقوم بإنشائه
import 'package:uuid/uuid.dart';

class AddItemDialog extends ConsumerStatefulWidget {
  const AddItemDialog({super.key});
  @override
  ConsumerState<AddItemDialog> createState() => _AddItemDialogState();
}

class _AddItemDialogState extends ConsumerState<AddItemDialog> {
  final _formKey = GlobalKey<FormState>();
  final _quantityController = TextEditingController();
  final _priceController = TextEditingController();
  DateTime? _selectedDate;
  ProductModel? _selectedProduct; // لتخزين المنتج الذي تم اختياره

  @override
  void dispose() {
    _quantityController.dispose();
    _priceController.dispose();
    super.dispose();
  }

  Future<void> _pickDate() async {
    final pickedDate = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now().add(const Duration(days: 1)),
      firstDate: DateTime.now(),
      lastDate: DateTime(2101),
    );
    if (pickedDate != null) {
      setState(() => _selectedDate = pickedDate);
    }
  }

  void _selectProduct() async {
    // عرض الواجهة الجديدة لاختيار المنتج
    final result = await showDialog<ProductModel>(
      context: context,
      builder: (_) => const SelectProductDialog(),
    );

    if (result != null) {
      setState(() {
        _selectedProduct = result;
      });
    }
  }

  void _onSave() {
    if (_formKey.currentState!.validate()) {
      // التأكد من اختيار منتج
      if (_selectedProduct == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('الرجاء اختيار منتج أولاً'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }

      final newItem = AgreementItem(
        id: const Uuid().v4(),
        // استخدام اسم المنتج المختار
        itemName: _selectedProduct!.name,
        // *** إضافة معرف المنتج ***
        // لاحظ: سنحتاج لتعديل موديل AgreementItem لإضافة هذا الحقل
        // productId: _selectedProduct!.id,
        totalQuantity: int.parse(_quantityController.text.trim()),
        unitPrice: double.parse(_priceController.text.trim()),
        expectedDeliveryDate: _selectedDate!,
        receivedQuantitySoFar: 0,
      );
      ref.read(agreementFormProvider.notifier).addItem(newItem);
      Navigator.of(context).pop();
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('إضافة بند جديد'),
      content: Form(
        key: _formKey,
        child: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // ---- الزر الجديد لاختيار المنتج ----
              OutlinedButton.icon(
                onPressed: _selectProduct,
                icon: const Icon(Icons.inventory_2_outlined),
                label: Text(
                  _selectedProduct == null
                      ? 'اختر منتج من الكتالوج'
                      : 'تغيير المنتج',
                ),
              ),
              if (_selectedProduct != null)
                Padding(
                  padding: const EdgeInsets.only(top: 8.0),
                  child: Text(
                    'المنتج المختار: ${_selectedProduct!.name}',
                    textAlign: TextAlign.center,
                    style: TextStyle(
                      color: Theme.of(context).primaryColor,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              const SizedBox(height: 16),
              // ---- نهاية الزر ----
              TextFormField(
                controller: _quantityController,
                decoration: const InputDecoration(labelText: 'الكمية'),
                keyboardType: TextInputType.number,
                validator: (val) =>
                    (val == null || val.isEmpty) ? 'الحقل مطلوب' : null,
              ),
              TextFormField(
                controller: _priceController,
                decoration: const InputDecoration(
                  labelText: 'سعر الوحدة',
                  suffixText: '\$',
                ),
                keyboardType: const TextInputType.numberWithOptions(
                  decimal: true,
                ),
                validator: (val) =>
                    (val == null || val.isEmpty) ? 'الحقل مطلوب' : null,
              ),
              TextFormField(
                readOnly: true,
                controller: TextEditingController(
                  text: _selectedDate == null
                      ? ''
                      : DateFormat('yyyy/MM/dd').format(_selectedDate!),
                ),
                decoration: const InputDecoration(
                  labelText: 'تاريخ تسليم البند',
                  hintText: 'اختر تاريخًا',
                ),
                onTap: _pickDate,
                validator: (value) =>
                    _selectedDate == null ? 'الرجاء اختيار تاريخ' : null,
              ),
            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(onPressed: _onSave, child: const Text('إضافة')),
      ],
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/add_payment_dialog.dart ---
// lib/features/suppliers/presentation/widgets/add_payment_dialog.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_details_provider.dart';

class AddPaymentDialog extends ConsumerStatefulWidget {
  final String agreementId;
  const AddPaymentDialog({super.key, required this.agreementId});

  @override
  ConsumerState<AddPaymentDialog> createState() => _AddPaymentDialogState();
}

class _AddPaymentDialogState extends ConsumerState<AddPaymentDialog> {
  final _formKey = GlobalKey<FormState>();
  final _amountController = TextEditingController();
  final _notesController = TextEditingController();

  @override
  void dispose() {
    _amountController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  void _onSave() {
    if (_formKey.currentState!.validate()) {
      final amount = double.tryParse(_amountController.text);
      if (amount == null) return;

      ref
          .read(updateAgreementStatusControllerProvider.notifier)
          .addPayment(
            context: context,
            agreementId: widget.agreementId,
            amount: amount,
            notes: _notesController.text.trim(),
          )
          .then((success) {
            if (success && mounted) {
              Navigator.of(context).pop();
            }
          });
    }
  }

  @override
  Widget build(BuildContext context) {
    final isSaving = ref.watch(updateAgreementStatusControllerProvider);
    return AlertDialog(
      title: const Text('إضافة دفعة جديدة'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextFormField(
              controller: _amountController,
              decoration: const InputDecoration(
                labelText: 'مبلغ الدفعة',
                prefixText: '\$ ',
              ),
              keyboardType: const TextInputType.numberWithOptions(
                decimal: true,
              ),
              validator: (val) {
                if (val == null || val.isEmpty) return 'الحقل مطلوب';
                if (double.tryParse(val) == null)
                  return 'الرجاء إدخال رقم صحيح';
                if (double.tryParse(val)! <= 0)
                  return 'يجب أن يكون المبلغ أكبر من صفر';
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _notesController,
              decoration: const InputDecoration(labelText: 'ملاحظات (اختياري)'),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(
          onPressed: isSaving ? null : _onSave,
          child: isSaving
              ? const SizedBox(
                  height: 20,
                  width: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
              : const Text('حفظ الدفعة'),
        ),
      ],
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/agreement_card.dart ---
// lib/features/suppliers/presentation/widgets/agreement_card.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart' hide TextDirection;
import 'package:syria_store/features/suppliers/data/models/supplier_agreement_model.dart';

class AgreementCard extends StatelessWidget {
  final SupplierAgreement agreement;
  const AgreementCard({super.key, required this.agreement});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    int? daysRemaining;
    if (agreement.expectedDeliveryDate != null) {
      final now = DateTime.now();
      final today = DateTime(now.year, now.month, now.day);
      final deliveryDate = DateTime(
        agreement.expectedDeliveryDate!.year,
        agreement.expectedDeliveryDate!.month,
        agreement.expectedDeliveryDate!.day,
      );
      daysRemaining = deliveryDate.difference(today).inDays;
    }
    final Map<String, dynamic> statusInfo = _getStatusInfo(
      agreement.status,
      theme,
    );

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      elevation: 4,
      shadowColor: Colors.black.withOpacity(0.1),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () {
          context.push('/supplier-agreements/details/${agreement.id}');
        },
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Expanded(
                    child: InkWell(
                      onTap: () {
                        if (agreement.supplierId != null) {
                          context.push(
                            '/suppliers/${agreement.supplierId}',
                            extra: agreement.supplierName,
                          );
                        }
                      },
                      child: Text(
                        agreement.supplierName ?? 'مورد غير محدد',
                        style: theme.textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                          decoration: TextDecoration.underline,
                          decorationColor: Colors.blue.withOpacity(0.5),
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 10,
                      vertical: 5,
                    ),
                    decoration: BoxDecoration(
                      color: statusInfo['color'].withOpacity(0.1),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          statusInfo['icon'],
                          color: statusInfo['color'],
                          size: 16,
                        ),
                        const SizedBox(width: 6),
                        Text(
                          statusInfo['text'],
                          style: TextStyle(
                            color: statusInfo['color'],
                            fontWeight: FontWeight.w600,
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const Divider(height: 24),
              Text(
                agreement.agreementDetails.isNotEmpty
                    ? agreement.agreementDetails
                    : 'لا توجد تفاصيل للملاحظات.',
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: Colors.grey.shade700,
                  height: 1.5,
                ),
              ),
              const SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  if (daysRemaining != null &&
                      daysRemaining >= 0 &&
                      agreement.status == 'pending_delivery')
                    _buildInfoChip(
                      theme,
                      Icons.hourglass_bottom_outlined,
                      'باقي $daysRemaining يوم',
                      color: daysRemaining < 7
                          ? Colors.red.shade700
                          : theme.colorScheme.primary,
                    ),
                  const Spacer(),
                  if (agreement.expectedDeliveryDate != null)
                    _buildInfoChip(
                      theme,
                      Icons.calendar_today_outlined,
                      DateFormat(
                        'yyyy/MM/dd',
                        'ar',
                      ).format(agreement.expectedDeliveryDate!),
                    ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Map<String, dynamic> _getStatusInfo(String status, ThemeData theme) {
    switch (status) {
      case 'pending_delivery':
        return {
          'color': Colors.orange.shade700,
          'icon': Icons.hourglass_top,
          'text': 'قيد التسليم',
        };
      case 'completed':
        return {
          'color': Colors.green.shade700,
          'icon': Icons.check_circle,
          'text': 'مكتمل',
        };
      case 'delayed':
        return {
          'color': Colors.red.shade700,
          'icon': Icons.error,
          'text': 'متأخر',
        };
      case 'cancelled':
        return {
          'color': Colors.grey.shade700,
          'icon': Icons.cancel,
          'text': 'ملغي',
        };
      default:
        return {'color': Colors.grey, 'icon': Icons.help, 'text': 'غير معروف'};
    }
  }

  Widget _buildInfoChip(
    ThemeData theme,
    IconData icon,
    String label, {
    Color? color,
  }) {
    return Row(
      children: [
        Icon(icon, size: 18, color: color ?? theme.textTheme.bodySmall?.color),
        const SizedBox(width: 6),
        Text(
          label,
          style: theme.textTheme.bodyMedium?.copyWith(
            color: color,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/private_storage_image.dart ---
// lib/features/suppliers/presentation/widgets/private_storage_image.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

class PrivateStorageImage extends ConsumerWidget {
  final String imagePath;
  const PrivateStorageImage({super.key, required this.imagePath});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return FutureBuilder<String>(
      future: ref
          .read(supabaseProvider)
          .storage
          .from('agreement-documents')
          .createSignedUrl(imagePath, 60), // 60 ثانية صلاحية للرابط
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        }
        if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {
          return const Tooltip(
            message: 'فشل تحميل الصورة',
            child: Icon(Icons.error_outline, color: Colors.red),
          );
        }

        final signedUrl = snapshot.data!;
        return ClipRRect(
          borderRadius: BorderRadius.circular(10),
          child: Image.network(
            signedUrl,
            width: 150,
            fit: BoxFit.cover,
            loadingBuilder: (context, child, progress) => progress == null
                ? child
                : const Center(child: CircularProgressIndicator()),
            errorBuilder: (context, error, stack) => const Tooltip(
              message: 'فشل تحميل الصورة من الرابط',
              child: Icon(Icons.broken_image_outlined, color: Colors.red),
            ),
          ),
        );
      },
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/receive_item_dialog.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/agreement_item_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_details_provider.dart';

class ReceiveItemDialog extends ConsumerStatefulWidget {
  final AgreementItem item;
  final String agreementId;

  const ReceiveItemDialog({
    super.key,
    required this.item,
    required this.agreementId,
  });

  @override
  ConsumerState<ReceiveItemDialog> createState() => _ReceiveItemDialogState();
}

class _ReceiveItemDialogState extends ConsumerState<ReceiveItemDialog> {
  final _formKey = GlobalKey<FormState>();
  final _quantityController = TextEditingController();
  final _notesController = TextEditingController();

  @override
  void dispose() {
    _quantityController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  void _onSave() {
    if (_formKey.currentState!.validate()) {
      final quantity = int.tryParse(_quantityController.text);
      if (quantity == null) return;

      ref
          .read(updateAgreementStatusControllerProvider.notifier)
          .receiveItems(
            context: context,
            itemId: widget.item.id,
            agreementId: widget.agreementId,
            quantity: quantity,
            notes: _notesController.text.trim(),
          )
          .then((success) {
            if (success && mounted) {
              Navigator.of(context).pop();
            }
          });
    }
  }

  @override
  Widget build(BuildContext context) {
    final isSaving = ref.watch(updateAgreementStatusControllerProvider);
    final remainingQuantity =
        widget.item.totalQuantity - widget.item.receivedQuantitySoFar;

    return AlertDialog(
      title: Text('استلام: ${widget.item.itemName}'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('الكمية المطلوبة: ${widget.item.totalQuantity}'),
            Text('الكمية المستلمة: ${widget.item.receivedQuantitySoFar}'),
            Text(
              'الكمية المتبقية: $remainingQuantity',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            TextFormField(
              controller: _quantityController,
              decoration: const InputDecoration(
                labelText: 'الكمية المستلمة الآن',
              ),
              keyboardType: TextInputType.number,
              validator: (val) {
                if (val == null || val.isEmpty) return 'الحقل مطلوب';
                final quantity = int.tryParse(val);
                if (quantity == null) return 'الرجاء إدخال رقم صحيح';
                if (quantity <= 0) return 'يجب أن تكون الكمية أكبر من صفر';
                if (quantity > remainingQuantity)
                  return 'لا يمكن استلام كمية أكبر من المتبقية';
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _notesController,
              decoration: const InputDecoration(labelText: 'ملاحظات (اختياري)'),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إلغاء'),
        ),
        ElevatedButton(
          onPressed: isSaving ? null : _onSave,
          child: isSaving
              ? const SizedBox(
                  height: 20,
                  width: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                )
              : const Text('تأكيد الاستلام'),
        ),
      ],
    );
  }
}


--- FILE: lib/features/suppliers/presentation/widgets/select_product_dialog.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/products/data/models/product_model.dart';
import 'package:syria_store/features/products/presentation/providers/product_providers.dart';

class SelectProductDialog extends ConsumerWidget {
  const SelectProductDialog({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final productsAsync = ref.watch(allProductsProvider);
    final searchQuery = ref.watch(productSearchQueryProvider);

    return AlertDialog(
      title: const Text('اختر منتجًا'),
      // نجعل المحتوى كبيرًا ليناسب البحث والقائمة
      content: SizedBox(
        width: double.maxFinite,
        height: MediaQuery.of(context).size.height * 0.6,
        child: Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: TextField(
                controller: TextEditingController(text: searchQuery),
                decoration: InputDecoration(
                  hintText: 'ابحث بالاسم أو الرمز (SKU)...',
                  prefixIcon: const Icon(Icons.search),
                ),
                onChanged: (value) {
                  ref.read(productSearchQueryProvider.notifier).state = value;
                },
              ),
            ),
            Expanded(
              child: productsAsync.when(
                data: (products) {
                  if (products.isEmpty) {
                    return const Center(
                      child: Text('لا توجد منتجات تطابق البحث.'),
                    );
                  }
                  return ListView.builder(
                    itemCount: products.length,
                    itemBuilder: (context, index) {
                      final product = products[index];
                      return ListTile(
                        leading: CircleAvatar(child: Text(product.sku)),
                        title: Text(product.name),
                        subtitle: Text('وحدة القياس: ${product.unitOfMeasure}'),
                        onTap: () {
                          // عند اختيار منتج، يتم إغلاق الواجهة وإرجاع المنتج المختار
                          Navigator.of(context).pop(product);
                        },
                      );
                    },
                  );
                },
                loading: () => const Center(child: CircularProgressIndicator()),
                error: (e, s) => Center(child: Text('حدث خطأ: $e')),
              ),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('إغلاق'),
        ),
      ],
    );
  }
}


--- FILE: lib/main.dart ---
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/app/routes/app_router.dart';
import 'package:syria_store/core/env/env.dart';
import 'package:syria_store/core/theme/app_theme.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  // استخدام runZonedGuarded لضمان التقاط جميع الأخطاء
  runZonedGuarded<Future<void>>(
    () async {
      WidgetsFlutterBinding.ensureInitialized();

      // --- معالج أخطاء Flutter ---
      // يلتقط الأخطاء التي تحدث داخل إطار عمل Flutter (أثناء بناء الواجهات، التخطيط، الرسم)
      FlutterError.onError = (FlutterErrorDetails details) {
        // طباعة الخطأ وتفاصيله في الكونسول
        FlutterError.dumpErrorToConsole(details);
        // يمكنك هنا إرسال الخطأ إلى خدمة مراقبة مثل Sentry أو Firebase Crashlytics
      };

      await Supabase.initialize(
        url: Env.supabaseUrl,
        anonKey: Env.supabaseAnonKey,
      );

      runApp(const ProviderScope(child: MyApp()));
    },
    (error, stack) {
      // --- معالج الأخطاء الشامل لـ Dart ---
      // يلتقط الأخطاء التي تحدث خارج إطار عمل Flutter (مثل الأخطاء في async gaps)
      debugPrint('Caught Dart Error: $error');
      debugPrint('Stack trace: $stack');
      // يمكنك هنا أيضًا إرسال الخطأ إلى خدمة المراقبة
    },
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: 'مفروشات دمشق',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,

      routerConfig: goRouter,

      localizationsDelegates: const [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('ar', ''), // Arabic
        Locale('en', ''), // English
      ],
      locale: const Locale('ar', ''),
    );
  }
}


--- FILE: test/widget_test.dart (Test File) ---
// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:syria_store/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}


--- FILE: lib/features/employees/presentation/pages/employees_list_page.dart ---
// lib/features/employees/presentation/pages/employees_list_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/app/widgets/app_drawer.dart';
import 'package:syria_store/features/employees/presentation/dialogs/add_edit_employee_dialog.dart';
import 'package:syria_store/features/invoices/presentation/providers/employees_provider.dart';

class EmployeesListPage extends ConsumerWidget {
  const EmployeesListPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final employeesAsync = ref.watch(employeesProvider);
    return Scaffold(
      appBar: AppBar(title: const Text('إدارة الموظفين')),
      floatingActionButton: FloatingActionButton(
        onPressed: () => showDialog(
          context: context,
          builder: (_) => const AddEditEmployeeDialog(),
        ),
        child: const Icon(Icons.add),
        tooltip: 'إضافة موظف جديد',
      ),
      body: RefreshIndicator(
        onRefresh: () => ref.refresh(employeesProvider.future),
        child: employeesAsync.when(
          data: (employees) => ListView.builder(
            itemCount: employees.length,
            itemBuilder: (context, index) {
              final employee = employees[index];
              return ListTile(
                leading: const Icon(Icons.person_outline),
                title: Text(employee.name),
              );
            },
          ),
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (e, s) => Center(child: Text('خطأ: $e')),
        ),
      ),
    );
  }
}


--- FILE: lib/features/invoices/data/models/fund_model.dart ---
// lib/features/invoices/data/models/fund_model.dart
import 'package:equatable/equatable.dart';

class FundModel extends Equatable {
  final int id;
  final String name;
  // -- بداية الإضافة --
  final String currency; // 'USD' or 'SYP'
  final String type; // 'cash' or 'bank'
  // -- نهاية الإضافة --

  const FundModel({
    required this.id,
    required this.name,
    // -- بداية الإضافة --
    required this.currency,
    required this.type,
    // -- نهاية الإضافة --
  });

  factory FundModel.fromJson(Map<String, dynamic> json) {
    return FundModel(
      id: json['id'],
      name: json['name'],
      // -- بداية الإضافة --
      currency: json['currency'],
      type: json['type'],
      // -- نهاية الإضافة --
    );
  }

  @override
  // -- تعديل --
  List<Object?> get props => [id, name, currency, type];
}


--- FILE: lib/features/invoices/data/models/invoice_item_model.dart ---
// lib/features/invoices/data/models/invoice_item_model.dart
import 'package:syria_store/features/products/data/models/product_model.dart';

class InvoiceItemModel {
  final ProductModel product;
  int quantity;
  double unitPrice;

  InvoiceItemModel({
    required this.product,
    required this.quantity,
    required this.unitPrice,
  });

  double get subtotal => quantity * unitPrice;
}


--- FILE: lib/features/invoices/data/models/invoice_model.dart ---
// lib/features/invoices/data/models/invoice_model.dart
import 'package:equatable/equatable.dart';

// -- بداية الإضافة --
// تعريف الـ Enum لحالة التسليم
enum InvoiceDeliveryStatus { pending, delivered }

// دالة لتحويل النص إلى Enum
InvoiceDeliveryStatus _parseDeliveryStatus(String status) {
  switch (status) {
    case 'delivered':
      return InvoiceDeliveryStatus.delivered;
    case 'pending':
    default:
      return InvoiceDeliveryStatus.pending;
  }
}
// -- نهاية الإضافة --


class InvoiceModel extends Equatable {
  final String id;
  final String invoiceNumber;
  final String? customerName;
  final String? userName;
  final DateTime invoiceDate;
  final double totalAmount;
  final String paymentMethod;
  final InvoiceDeliveryStatus deliveryStatus; // -- تم التعديل --
  final double? discountAmount;
  final String? notes;

  const InvoiceModel({
    required this.id,
    required this.invoiceNumber,
    this.customerName,
    this.userName,
    required this.invoiceDate,
    required this.totalAmount,
    required this.paymentMethod,
    required this.deliveryStatus, // -- تم التعديل --
    this.discountAmount,
    this.notes,
  });

  factory InvoiceModel.fromJson(Map<String, dynamic> json) {
    return InvoiceModel(
      id: json['id'],
      invoiceNumber: json['invoice_number'],
      customerName: json['contacts']?['name'],
      userName: json['profiles']?['full_name'], 
      invoiceDate: DateTime.parse(json['invoice_date']),
      totalAmount: (json['total_amount'] as num).toDouble(),
      paymentMethod: json['payment_method'],
      deliveryStatus: _parseDeliveryStatus(json['delivery_status']), // -- تم التعديل --
      discountAmount: (json['discount_amount'] as num?)?.toDouble(),
      notes: json['notes'],
    );
  }

  @override
  List<Object?> get props => [id, invoiceNumber, customerName, userName, invoiceDate];
}


--- FILE: lib/features/invoices/data/models/payment_detail_model.dart ---
class PaymentDetailModel {
  double amount;
  String currency; // 'USD' or 'SYP'
  double? exchangeRate;
  int? fundId; // -- تمت الإضافة --

  PaymentDetailModel({
    required this.amount,
    required this.currency,
    this.exchangeRate,
    this.fundId, // -- تمت الإضافة --
  });
}


--- FILE: lib/features/invoices/presentation/pages/create_invoice_page.dart ---
// lib/features/invoices/presentation/pages/create_invoice_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import 'package:syria_store/features/branches/data/models/branch_model.dart';
import 'package:syria_store/features/branches/presentation/providers/branches_provider.dart';
import 'package:syria_store/features/customers/presentation/dialogs/add_edit_customer_dialog.dart';
import 'package:syria_store/features/customers/presentation/providers/customers_provider.dart';
import 'package:syria_store/features/invoices/data/models/fund_model.dart';
import 'package:syria_store/features/invoices/data/models/invoice_item_model.dart';
import 'package:syria_store/features/invoices/data/models/payment_detail_model.dart';
import 'package:syria_store/features/invoices/presentation/providers/employees_provider.dart';
import 'package:syria_store/features/invoices/presentation/providers/funds_provider.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoice_provider.dart';
import 'package:syria_store/features/invoices/presentation/widgets/customer_section_widget.dart';
import 'package:syria_store/features/invoices/presentation/widgets/invoice_items_section_widget.dart';
import 'package:syria_store/features/invoices/presentation/widgets/invoice_summary_widget.dart';
import 'package:syria_store/features/invoices/presentation/widgets/payment_section_widget.dart';
import 'package:syria_store/features/products/data/models/product_model.dart';
import 'package:syria_store/features/settings/presentation/providers/settings_provider.dart';
import 'package:syria_store/features/suppliers/data/models/contact_model.dart';

class CreateInvoicePage extends ConsumerStatefulWidget {
  const CreateInvoicePage({super.key});

  @override
  ConsumerState<CreateInvoicePage> createState() => _CreateInvoicePageState();
}

class _CreateInvoicePageState extends ConsumerState<CreateInvoicePage> {
  bool _isWalkInCustomer = true;
  FundModel? _selectedUsdFund;
  FundModel? _selectedSypFund;

  final _discountController = TextEditingController();
  final _usdPaymentController = TextEditingController();
  final _sypPaymentController = TextEditingController();
  final _notesController = TextEditingController();
  final _manualInvoiceController = TextEditingController();
  final _customerAutocompleteController = TextEditingController();

  @override
  void initState() {
    super.initState();
    Future.microtask(() {
      final employees = ref.read(employeesProvider).valueOrNull;
      if (employees != null && employees.isNotEmpty) {
        ref.read(selectedEmployeeProvider.notifier).state = employees.first;
      }
      final branches = ref.read(branchesProvider).valueOrNull;
      if (branches != null && branches.isNotEmpty) {
        final mainBranch = branches.firstWhere(
          (b) => b.isMain,
          orElse: () => branches.first,
        );
        ref.read(selectedBranchProvider.notifier).state = mainBranch;
      }
    });

    _discountController.addListener(() {
      final discount = double.tryParse(_discountController.text) ?? 0.0;
      ref.read(invoiceFormProvider.notifier).setDiscount(discount);
    });
  }

  @override
  void dispose() {
    _discountController.dispose();
    _usdPaymentController.dispose();
    _sypPaymentController.dispose();
    _notesController.dispose();
    _manualInvoiceController.dispose();
    _customerAutocompleteController.dispose();
    super.dispose();
  }

  void _onSaveInvoice() {
    final invoiceState = ref.read(invoiceFormProvider);
    final selectedBranch = ref.read(selectedBranchProvider);
    final selectedEmployee = ref.read(selectedEmployeeProvider);
    final latestRate =
        ref.read(latestExchangeRateProvider).value?.rateUsdToSyp ?? 0.0;

    // -- بداية التعديل --
    // 1. إنشاء قائمة الدفعات بشكل منفصل
    final List<PaymentDetailModel> payments = [];
    final double usdAmount = double.tryParse(_usdPaymentController.text) ?? 0.0;
    if (usdAmount > 0) {
      payments.add(
        PaymentDetailModel(
          amount: usdAmount,
          currency: 'USD',
          fundId: _selectedUsdFund?.id,
        ),
      );
    }

    final double sypAmount = double.tryParse(_sypPaymentController.text) ?? 0.0;
    if (sypAmount > 0) {
      if (latestRate == 0.0) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('الرجاء تحديد سعر صرف صالح'),
            backgroundColor: Colors.red,
          ),
        );
        return;
      }
      payments.add(
        PaymentDetailModel(
          amount: sypAmount,
          currency: 'SYP',
          exchangeRate: latestRate,
          fundId: _selectedSypFund?.id,
        ),
      );
    }
    // -- نهاية التعديل --

    // ... (Validation logic can be added here)

    ref
        .read(invoiceControllerProvider.notifier)
        .saveInvoice(
          context,
          // 2. تمرير القائمة الجاهزة
          invoiceState: invoiceState.copyWith(
            notes: _notesController.text.trim(),
            manualInvoiceNumber: _manualInvoiceController.text.trim(),
            payments: payments,
          ),
          exchangeRate: latestRate,
          branchId: selectedBranch!.id,
          userId: selectedEmployee!.id,
        )
        .then((success) {
          if (success) _resetForm();
        });
  }

  void _resetForm() {
    ref.read(invoiceFormProvider.notifier).clearForm();
    _discountController.clear();
    _usdPaymentController.clear();
    _sypPaymentController.clear();
    _notesController.clear();
    _manualInvoiceController.clear();
    _customerAutocompleteController.clear();
    setState(() {
      _isWalkInCustomer = true;
      _selectedUsdFund = null;
      _selectedSypFund = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final invoiceState = ref.watch(invoiceFormProvider);
    final isSaving = ref.watch(invoiceControllerProvider);
    final totalAfterDiscount = invoiceState.totalAfterDiscount;

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
        title: _buildBranchSelector(),
        actions: [
          _buildExchangeRateDisplay(),
          IconButton(
            icon: const Icon(Icons.clear_all),
            onPressed: _resetForm,
            tooltip: 'فاتورة جديدة',
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Card(
              child: Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 16.0,
                  vertical: 8.0,
                ),
                child: ref
                    .watch(employeesProvider)
                    .when(
                      data: (employees) =>
                          DropdownButtonFormField<ContactModel>(
                            value: ref.watch(selectedEmployeeProvider),
                            decoration: const InputDecoration(
                              labelText: 'البائع',
                              border: InputBorder.none,
                            ),
                            items: employees
                                .map(
                                  (e) => DropdownMenuItem(
                                    value: e,
                                    child: Text(e.name),
                                  ),
                                )
                                .toList(),
                            onChanged: (employee) =>
                                ref
                                        .read(selectedEmployeeProvider.notifier)
                                        .state =
                                    employee,
                          ),
                      loading: () => const Text('جاري تحميل الموظفين...'),
                      error: (e, s) => const Text('خطأ في تحميل الموظفين'),
                    ),
              ),
            ),
            const SizedBox(height: 16),

            CustomerSectionWidget(
              isWalkInCustomer: _isWalkInCustomer,
              onWalkInCustomerChanged: (value) {
                setState(() {
                  _isWalkInCustomer = value ?? true;
                  if (_isWalkInCustomer) {
                    ref.read(invoiceFormProvider.notifier).setCustomer(null);
                    _customerAutocompleteController.clear();
                  }
                });
              },
              manualInvoiceController: _manualInvoiceController,
              customerAutocompleteController: _customerAutocompleteController,
            ),
            const SizedBox(height: 24),

            const InvoiceItemsSectionWidget(),
            const SizedBox(height: 24),

            InvoiceSummaryWidget(
              discountController: _discountController,
              totalAfterDiscount: totalAfterDiscount,
            ),
            const SizedBox(height: 24),

            PaymentSectionWidget(
              usdPaymentController: _usdPaymentController,
              sypPaymentController: _sypPaymentController,
              selectedUsdFund: _selectedUsdFund,
              selectedSypFund: _selectedSypFund,
              onUsdFundChanged: (fund) =>
                  setState(() => _selectedUsdFund = fund),
              onSypFundChanged: (fund) =>
                  setState(() => _selectedSypFund = fund),
            ),
            const SizedBox(height: 16),

            TextFormField(
              controller: _notesController,
              decoration: const InputDecoration(
                labelText: 'ملاحظات على الفاتورة',
              ),
              maxLines: 2,
            ),
            const SizedBox(height: 32),

            ElevatedButton.icon(
              onPressed: isSaving || invoiceState.items.isEmpty
                  ? null
                  : _onSaveInvoice,
              icon: isSaving ? const SizedBox.shrink() : const Icon(Icons.save),
              label: isSaving
                  ? const SizedBox(
                      height: 24,
                      width: 24,
                      child: CircularProgressIndicator(color: Colors.white),
                    )
                  : const Text('حفظ الفاتورة'),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 16),
                textStyle: theme.textTheme.titleLarge?.copyWith(
                  color: Colors.white,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBranchSelector() {
    final branchesAsync = ref.watch(branchesProvider);
    final selectedBranch = ref.watch(selectedBranchProvider);
    return branchesAsync.when(
      data: (branches) {
        if (selectedBranch == null && branches.isNotEmpty) {
          WidgetsBinding.instance.addPostFrameCallback((_) {
            if (mounted) {
              final mainBranch = branches.firstWhere(
                (b) => b.isMain,
                orElse: () => branches.first,
              );
              ref.read(selectedBranchProvider.notifier).state = mainBranch;
            }
          });
        }
        return DropdownButton<BranchModel>(
          value: selectedBranch,
          hint: const Text('اختر الفرع', style: TextStyle(color: Colors.white)),
          isExpanded: false,
          underline: const SizedBox.shrink(),
          icon: const Icon(Icons.arrow_drop_down, color: Colors.white),
          style: Theme.of(
            context,
          ).textTheme.titleLarge?.copyWith(color: Colors.white),
          dropdownColor: Theme.of(context).primaryColor,
          items: branches
              .map(
                (branch) => DropdownMenuItem<BranchModel>(
                  value: branch,
                  child: Text(branch.name),
                ),
              )
              .toList(),
          onChanged: (branch) =>
              ref.read(selectedBranchProvider.notifier).state = branch,
        );
      },
      loading: () => const SizedBox(
        width: 20,
        height: 20,
        child: CircularProgressIndicator(color: Colors.white, strokeWidth: 2),
      ),
      error: (e, s) => const Icon(Icons.error, color: Colors.red),
    );
  }

  Widget _buildExchangeRateDisplay() {
    final theme = Theme.of(context);
    final latestRateAsync = ref.watch(latestExchangeRateProvider);
    return latestRateAsync.when(
      data: (rate) => rate == null
          ? const Tooltip(
              message: 'لم يتم تحديد سعر صرف',
              child: Icon(Icons.warning, color: Colors.yellow),
            )
          : Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8.0),
              child: Center(
                child: Text(
                  'سعر الصرف: ${rate.rateUsdToSyp}',
                  style: theme.textTheme.bodyLarge?.copyWith(
                    color: Colors.white,
                  ),
                ),
              ),
            ),
      loading: () => const SizedBox.shrink(),
      error: (err, stack) => const Tooltip(
        message: 'خطأ في جلب سعر الصرف',
        child: Icon(Icons.error, color: Colors.red),
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/pages/invoices_list_page.dart ---
// lib/features/invoices/presentation/pages/invoices_list_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:syria_store/app/widgets/app_drawer.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoices_list_provider.dart';
import 'package:syria_store/features/invoices/presentation/widgets/invoice_card.dart';
import 'package:syria_store/features/invoices/presentation/widgets/invoice_filters.dart';

class InvoicesListPage extends ConsumerWidget {
  const InvoicesListPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final invoicesAsync = ref.watch(invoicesProvider);

    return Scaffold(
      drawer: const AppDrawer(),
      appBar: AppBar(
        title: const Text('سجل المبيعات'),
        actions: [
          IconButton(
            onPressed: () => context.push('/create-invoice'),
            icon: const Icon(Icons.add_circle_outline),
            tooltip: 'فاتورة جديدة',
          ),
        ],
      ),
      body: Column(
        children: [
          const InvoiceFilters(),
          Expanded(
            child: RefreshIndicator(
              onRefresh: () => ref.refresh(invoicesProvider.future),
              child: invoicesAsync.when(
                data: (invoices) {
                  if (invoices.isEmpty) {
                    return LayoutBuilder(
                      builder: (context, constraints) => SingleChildScrollView(
                        physics: const AlwaysScrollableScrollPhysics(),
                        child: ConstrainedBox(
                          constraints: BoxConstraints(minHeight: constraints.maxHeight),
                          child: const Center(child: Text('لا توجد فواتير تطابق هذا البحث.')),
                        ),
                      ),
                    );
                  }
                  return ListView.builder(
                    physics: const AlwaysScrollableScrollPhysics(),
                    itemCount: invoices.length,
                    itemBuilder: (context, index) => InvoiceCard(invoice: invoices[index]),
                  );
                },
                loading: () => const Center(child: CircularProgressIndicator()),
                error: (err, stack) => Center(child: Text('حدث خطأ: \${err.toString()}')),
              ),
            ),
          ),
        ],
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/pages/invoice_details_page.dart ---
// lib/features/invoices/presentation/pages/invoice_details_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoices_list_provider.dart';
import 'package:syria_store/features/invoices/presentation/widgets/details/invoice_financial_summary.dart';
import 'package:syria_store/features/invoices/presentation/widgets/details/invoice_header_details.dart';
import 'package:syria_store/features/invoices/presentation/widgets/details/invoice_items_list_details.dart';

class InvoiceDetailsPage extends ConsumerWidget {
  final String invoiceId;
  const InvoiceDetailsPage({super.key, required this.invoiceId});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final invoiceAsync = ref.watch(invoiceDetailsProvider(invoiceId));

    return Scaffold(
      appBar: AppBar(title: const Text('تفاصيل الفاتورة')),
      body: RefreshIndicator(
        onRefresh: () async {
          ref.invalidate(invoiceDetailsProvider(invoiceId));
          ref.invalidate(invoiceItemsProvider(invoiceId));
        },
        child: invoiceAsync.when(
          data: (invoice) {
            if (invoice == null) {
              return const Center(child: Text('لم يتم العثور على الفاتورة.'));
            }
            return SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  InvoiceHeaderDetails(invoice: invoice),
                  const SizedBox(height: 24),
                  InvoiceItemsListDetails(invoiceId: invoice.id),
                  const SizedBox(height: 24),
                  InvoiceFinancialSummary(invoice: invoice),
                ],
              ),
            );
          },
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (err, stack) => Center(child: Text('خطأ في جلب تفاصيل الفاتورة: $err')),
        ),
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/providers/employees_provider.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/suppliers/data/models/contact_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

final employeesProvider = FutureProvider.autoDispose<List<ContactModel>>((ref) async {
  final supabase = ref.watch(supabaseProvider);
  try {
    final response = await supabase.from('profiles').select('id, full_name');
    
    return response.map((item) => ContactModel(
      id: item['id'], 
      name: item['full_name'] ?? 'موظف غير مسمى',
      isSupplier: false,
      isCustomer: false,
    )).toList();
  } catch (e) {
    print('Error fetching employees: $e');
    rethrow;
  }
});

final selectedEmployeeProvider = StateProvider<ContactModel?>((ref) => null);

final employeeControllerProvider = StateNotifierProvider.autoDispose<EmployeeController, bool>((ref) {
  return EmployeeController(ref);
});

class EmployeeController extends StateNotifier<bool> {
  final Ref _ref;
  EmployeeController(this._ref) : super(false);

  Future<bool> addEmployee(BuildContext context, {required String fullName}) async {
    state = true;
    try {
      await _ref.read(supabaseProvider).from('profiles').insert({'full_name': fullName});
      _ref.invalidate(employeesProvider);
      
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
            content: Text('تمت إضافة الموظف بنجاح'),
            backgroundColor: Colors.green));
      }
      return true;
    } catch(e) {
       if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            content: Text('فشل إضافة الموظف: $e'),
            backgroundColor: Colors.red));
      }
      return false;
    } finally {
      state = false;
    }
  }
}


--- FILE: lib/features/invoices/presentation/providers/funds_provider.dart ---
// lib/features/invoices/presentation/providers/funds_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/invoices/data/models/fund_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

// Provider رئيسي لجلب كل الصناديق مرة واحدة
final allFundsProvider = FutureProvider.autoDispose<List<FundModel>>((
  ref,
) async {
  final supabase = ref.watch(supabaseProvider);
  final response = await supabase.from('funds').select();
  return response.map((item) => FundModel.fromJson(item)).toList();
});

// Provider لفلترة صناديق الدولار فقط
final usdFundsProvider = Provider.autoDispose<List<FundModel>>((ref) {
  final allFunds = ref.watch(allFundsProvider).value;
  if (allFunds == null) return [];
  return allFunds.where((fund) => fund.currency == 'USD').toList();
});

// Provider لفلترة صناديق الليرة السورية فقط
final sypFundsProvider = Provider.autoDispose<List<FundModel>>((ref) {
  final allFunds = ref.watch(allFundsProvider).value;
  if (allFunds == null) return [];
  return allFunds.where((fund) => fund.currency == 'SYP').toList();
});


--- FILE: lib/features/invoices/presentation/providers/invoices_list_provider.dart ---
// lib/features/invoices/presentation/providers/invoices_list_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/invoices/data/models/invoice_item_model.dart';
import 'package:syria_store/features/invoices/data/models/invoice_model.dart';
import 'package:syria_store/features/products/data/models/product_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

// Providers for search and filtering
final invoiceSearchQueryProvider = StateProvider.autoDispose<String>((ref) => '');
final invoicePaymentMethodFilterProvider = StateProvider.autoDispose<String?>((ref) => null);
final invoiceDeliveryStatusFilterProvider = StateProvider.autoDispose<String?>((ref) => null);


// Provider to fetch all invoices using the RPC function
final invoicesProvider = FutureProvider.autoDispose<List<InvoiceModel>>((ref) async {
  final supabase = ref.watch(supabaseProvider);
  final searchQuery = ref.watch(invoiceSearchQueryProvider);
  final paymentMethod = ref.watch(invoicePaymentMethodFilterProvider);
  final deliveryStatus = ref.watch(invoiceDeliveryStatusFilterProvider);

  try {
    // -- بداية التعديل --
    // استدعاء الدالة مباشرة من قاعدة البيانات
    final response = await supabase
        .rpc(
          'search_invoices',
          params: {
            'p_search_query': searchQuery,
            'p_payment_method_filter': paymentMethod,
            'p_delivery_status_filter': deliveryStatus,
          },
        )
        .select('*, contacts(id, name), profiles(id, full_name)');
    // -- نهاية التعديل --
    
    final List<Map<String, dynamic>> data = List.from(response);
    return data.map((item) => InvoiceModel.fromJson(item)).toList();
  } catch (e) {
    print('Error fetching invoices: $e');
    rethrow;
  }
});

// Provider to fetch details of a single invoice
final invoiceDetailsProvider = FutureProvider.autoDispose
    .family<InvoiceModel?, String>((ref, invoiceId) async {
      final supabase = ref.watch(supabaseProvider);
      try {
        final response = await supabase
            .from('invoices')
            .select('*, contacts(id, name), profiles(id, full_name)')
            .eq('id', invoiceId)
            .single();
        return InvoiceModel.fromJson(response);
      } catch (e) {
        print('Error fetching invoice details: $e');
        return null;
      }
    });

// Provider to fetch items of a specific invoice
final invoiceItemsProvider = FutureProvider.autoDispose
    .family<List<InvoiceItemModel>, String>((ref, invoiceId) async {
      final supabase = ref.watch(supabaseProvider);
      try {
        final response = await supabase
            .from('invoice_items')
            .select('*, products(*)')
            .eq('invoice_id', invoiceId);

        return response.map((item) {
          return InvoiceItemModel(
            product: ProductModel.fromJson(item['products']),
            quantity: item['quantity'],
            unitPrice: (item['unit_price'] as num).toDouble(),
          );
        }).toList();
      } catch (e) {
        print('Error fetching invoice items: $e');
        rethrow;
      }
    });


--- FILE: lib/features/invoices/presentation/providers/invoice_provider.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/invoices/data/models/invoice_item_model.dart';
import 'package:syria_store/features/invoices/data/models/payment_detail_model.dart';
import 'package:syria_store/features/suppliers/data/models/contact_model.dart';
import 'package:syria_store/features/suppliers/presentation/providers/agreement_list_provider.dart';

@immutable
class InvoiceFormState {
  final ContactModel? selectedCustomer;
  final List<InvoiceItemModel> items;
  final double discount;
  final String paymentMethod;
  final List<PaymentDetailModel> payments;
  final String notes;
  final String? manualInvoiceNumber;
  final DateTime invoiceDate;
  final String deliveryStatus;

  InvoiceFormState({
    this.selectedCustomer,
    this.items = const [],
    this.discount = 0.0,
    this.paymentMethod = 'cash',
    this.payments = const [],
    this.notes = '',
    this.manualInvoiceNumber,
    DateTime? invoiceDate,
    this.deliveryStatus = 'delivered',
  }) : invoiceDate = invoiceDate ?? DateTime.now();

  double get subtotal => items.fold(0, (sum, item) => sum + item.subtotal);
  double get totalAfterDiscount => subtotal - discount;

  InvoiceFormState copyWith({
    ContactModel? selectedCustomer,
    bool clearCustomer = false,
    List<InvoiceItemModel>? items,
    double? discount,
    String? paymentMethod,
    List<PaymentDetailModel>? payments,
    String? notes,
    String? manualInvoiceNumber,
    DateTime? invoiceDate,
    String? deliveryStatus,
  }) {
    return InvoiceFormState(
      selectedCustomer: clearCustomer ? null : selectedCustomer ?? this.selectedCustomer,
      items: items ?? this.items,
      discount: discount ?? this.discount,
      paymentMethod: paymentMethod ?? this.paymentMethod,
      payments: payments ?? this.payments,
      notes: notes ?? this.notes,
      manualInvoiceNumber: manualInvoiceNumber ?? this.manualInvoiceNumber,
      invoiceDate: invoiceDate ?? this.invoiceDate,
      deliveryStatus: deliveryStatus ?? this.deliveryStatus,
    );
  }
}

final invoiceFormProvider =
    StateNotifierProvider.autoDispose<InvoiceFormNotifier, InvoiceFormState>((ref) {
  return InvoiceFormNotifier();
});

class InvoiceFormNotifier extends StateNotifier<InvoiceFormState> {
  InvoiceFormNotifier() : super(InvoiceFormState());

  void setInvoiceDate(DateTime date) {
    state = state.copyWith(invoiceDate: date);
  }
  void setDeliveryStatus(String status) {
    state = state.copyWith(deliveryStatus: status);
  }
  void setCustomer(ContactModel? customer) {
    state = state.copyWith(selectedCustomer: customer, clearCustomer: customer == null);
  }
  void setManualInvoiceNumber(String? number) {
    state = state.copyWith(manualInvoiceNumber: number);
  }
  void addItem(InvoiceItemModel newItem) {
    final existingIndex = state.items.indexWhere((item) => item.product.id == newItem.product.id);
    if (existingIndex != -1) {
      final updatedItems = List<InvoiceItemModel>.from(state.items);
      updatedItems[existingIndex].quantity += newItem.quantity;
      state = state.copyWith(items: updatedItems);
    } else {
      state = state.copyWith(items: [...state.items, newItem]);
    }
  }
  void removeItem(String productId) {
    state = state.copyWith(items: state.items.where((item) => item.product.id != productId).toList());
  }
  void updateItemQuantity(String productId, int newQuantity) {
    state = state.copyWith(
        items: state.items.map((item) {
      if (item.product.id == productId) {
        item.quantity = newQuantity < 0 ? 0 : newQuantity;
      }
      return item;
    }).toList());
  }
  void updateItemPrice(String productId, double newPrice) {
    state = state.copyWith(
        items: state.items.map((item) {
      if (item.product.id == productId) {
        item.unitPrice = newPrice;
      }
      return item;
    }).toList());
  }
  void setDiscount(double discount) {
    state = state.copyWith(discount: discount);
  }
  void setPaymentMethod(String method) {
    state = state.copyWith(paymentMethod: method);
  }
  void setNotes(String notes) {
    state = state.copyWith(notes: notes);
  }
  void addPayment(PaymentDetailModel payment) {
    state = state.copyWith(payments: [...state.payments, payment]);
  }
  void clearPayments() {
    state = state.copyWith(payments: []);
  }
  void clearForm() {
    state = InvoiceFormState();
  }
}

final invoiceControllerProvider =
    StateNotifierProvider.autoDispose<InvoiceController, bool>((ref) {
  return InvoiceController(ref);
});

class InvoiceController extends StateNotifier<bool> {
  final Ref _ref;
  InvoiceController(this._ref) : super(false);

  Future<bool> saveInvoice(
    BuildContext context, {
    required InvoiceFormState invoiceState,
    required double exchangeRate,
    required String branchId,
    required String userId,
    int? usdFundId,
    int? sypFundId,
  }) async {
    state = true;
    try {
      final itemsJson = invoiceState.items
          .map((item) => {
                'product_id': item.product.id,
                'quantity': item.quantity,
                'unit_price': item.unitPrice,
              })
          .toList();

      final paymentsJson = invoiceState.payments
          .map((p) => {
                'amount': p.amount,
                'currency': p.currency,
                'exchange_rate': p.currency == 'SYP' ? exchangeRate : null,
                'fund_id': p.currency == 'USD' ? usdFundId : sypFundId,
              })
          .toList();

      await _ref.read(supabaseProvider).rpc('create_full_invoice', params: {
        'p_branch_id': branchId,
        'p_user_id': userId,
        'p_contact_id': invoiceState.selectedCustomer?.id,
        'p_payment_method': invoiceState.paymentMethod,
        'p_discount_amount': invoiceState.discount,
        'p_notes': invoiceState.notes,
        'p_invoice_number_manual': invoiceState.manualInvoiceNumber,
        'p_invoice_date': invoiceState.invoiceDate.toIso8601String(),
        'p_delivery_status': invoiceState.deliveryStatus,
        'p_items_jsonb': itemsJson,
        'p_payment_jsonb': paymentsJson
      });

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('تم حفظ الفاتورة بنجاح'), backgroundColor: Colors.green));
      }
      _ref.read(invoiceFormProvider.notifier).clearForm();
      return true;

    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('فشل حفظ الفاتورة: $e'), backgroundColor: Colors.red));
      }
      return false;
    } finally {
      state = false;
    }
  }
}


--- FILE: lib/features/invoices/presentation/widgets/customer_section_widget.dart ---
// lib/features/invoices/presentation/widgets/customer_section_widget.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:syria_store/features/customers/presentation/dialogs/add_edit_customer_dialog.dart';
import 'package:syria_store/features/customers/presentation/providers/customers_provider.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoice_provider.dart';
import 'package:syria_store/features/suppliers/data/models/contact_model.dart';

class CustomerSectionWidget extends ConsumerWidget {
  final bool isWalkInCustomer;
  final ValueChanged<bool?> onWalkInCustomerChanged;
  final TextEditingController manualInvoiceController;
  final TextEditingController customerAutocompleteController;

  const CustomerSectionWidget({
    super.key,
    required this.isWalkInCustomer,
    required this.onWalkInCustomerChanged,
    required this.manualInvoiceController,
    required this.customerAutocompleteController,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final invoiceState = ref.watch(invoiceFormProvider);

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('معلومات العميل والفاتورة', style: theme.textTheme.titleLarge),
            const Divider(),
            Row(
              children: [
                Expanded(
                  child: TextFormField(
                    controller: manualInvoiceController,
                    decoration: const InputDecoration(
                      labelText: 'رقم الفاتورة (اختياري)',
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: TextFormField(
                    readOnly: true,
                    controller: TextEditingController(
                      text: DateFormat(
                        'yyyy/MM/dd',
                      ).format(invoiceState.invoiceDate),
                    ),
                    decoration: const InputDecoration(
                      labelText: 'تاريخ الفاتورة',
                    ),
                    onTap: () async {
                      final pickedDate = await showDatePicker(
                        context: context,
                        initialDate: DateTime.now(),
                        firstDate: DateTime(2020),
                        lastDate: DateTime(2101),
                      );
                      if (pickedDate != null) {
                        ref
                            .read(invoiceFormProvider.notifier)
                            .setInvoiceDate(pickedDate);
                      }
                    },
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            CheckboxListTile(
              title: const Text('زبون عابر (بدون اسم)'),
              value: isWalkInCustomer,
              onChanged: onWalkInCustomerChanged,
            ),
            if (!isWalkInCustomer)
              Row(
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  Expanded(
                    child: Autocomplete<ContactModel>(
                      displayStringForOption: (ContactModel option) =>
                          option.name,
                      optionsBuilder:
                          (TextEditingValue textEditingValue) async {
                            if (textEditingValue.text == '') {
                              return const Iterable<ContactModel>.empty();
                            }
                            return await ref.watch(
                              customerAutocompleteProvider(
                                textEditingValue.text,
                              ).future,
                            );
                          },
                      onSelected: (ContactModel selection) {
                        ref
                            .read(invoiceFormProvider.notifier)
                            .setCustomer(selection);
                        customerAutocompleteController.text = selection.name;
                      },
                      fieldViewBuilder:
                          (
                            BuildContext context,
                            TextEditingController fieldController,
                            FocusNode fieldFocusNode,
                            VoidCallback onFieldSubmitted,
                          ) {
                            return TextFormField(
                              controller: fieldController,
                              focusNode: fieldFocusNode,
                              decoration: const InputDecoration(
                                labelText: 'ابحث عن اسم العميل أو رقمه',
                              ),
                            );
                          },
                      optionsViewBuilder:
                          (
                            BuildContext context,
                            AutocompleteOnSelected<ContactModel> onSelected,
                            Iterable<ContactModel> options,
                          ) {
                            return Align(
                              alignment: Alignment.topLeft,
                              child: Material(
                                elevation: 4.0,
                                child: SizedBox(
                                  height: 200.0,
                                  child: ListView.builder(
                                    padding: const EdgeInsets.all(8.0),
                                    itemCount: options.length,
                                    itemBuilder:
                                        (BuildContext context, int index) {
                                          final ContactModel option = options
                                              .elementAt(index);
                                          return GestureDetector(
                                            onTap: () => onSelected(option),
                                            child: ListTile(
                                              title: Text(option.name),
                                              subtitle: Text(
                                                option.phoneNumber ?? '',
                                              ),
                                            ),
                                          );
                                        },
                                  ),
                                ),
                              ),
                            );
                          },
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.add_circle_outline),
                    onPressed: () => showDialog(
                      context: context,
                      builder: (_) => const AddEditCustomerDialog(),
                    ),
                    tooltip: 'إضافة عميل جديد',
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/widgets/details/invoice_financial_summary.dart ---
// lib/features/invoices/presentation/widgets/details/invoice_financial_summary.dart
import 'package:flutter/material.dart';
import 'package:syria_store/features/invoices/data/models/invoice_model.dart';

class InvoiceFinancialSummary extends StatelessWidget {
  final InvoiceModel invoice;
  const InvoiceFinancialSummary({super.key, required this.invoice});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final subtotal = invoice.totalAmount + (invoice.discountAmount ?? 0);

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            _buildFinancialRow(theme, 'المجموع الفرعي:', '\$${subtotal.toStringAsFixed(2)}'),
            _buildFinancialRow(theme, 'الخصم:', '-\$${(invoice.discountAmount ?? 0).toStringAsFixed(2)}'),
            const Divider(),
            _buildFinancialRow(
              theme,
              'المجموع النهائي:',
              '\$${invoice.totalAmount.toStringAsFixed(2)}',
              isTotal: true,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFinancialRow(ThemeData theme, String title, String value, {bool isTotal = false}) {
    final style = isTotal
        ? theme.textTheme.titleLarge?.copyWith(color: theme.primaryColor, fontWeight: FontWeight.bold)
        : theme.textTheme.bodyLarge;
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(title, style: style),
          Text(value, style: style),
        ],
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/widgets/details/invoice_header_details.dart ---
// lib/features/invoices/presentation/widgets/details/invoice_header_details.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:syria_store/features/invoices/data/models/invoice_model.dart';

class InvoiceHeaderDetails extends StatelessWidget {
  final InvoiceModel invoice;
  const InvoiceHeaderDetails({super.key, required this.invoice});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('فاتورة مبيعات', style: theme.textTheme.headlineSmall),
                Chip(label: Text(invoice.paymentMethod == 'cash' ? 'نقدي' : 'آجل')),
              ],
            ),
            const Divider(),
            _buildInfoRow(context, Icons.person_outline, 'العميل:', invoice.customerName ?? 'زبون عابر'),
            _buildInfoRow(context, Icons.confirmation_number_outlined, 'رقم الفاتورة:', invoice.invoiceNumber),
            _buildInfoRow(context, Icons.calendar_today_outlined, 'تاريخ الفاتورة:', DateFormat('yyyy/MM/dd').format(invoice.invoiceDate)),
            _buildInfoRow(context, Icons.badge_outlined, 'البائع:', invoice.userName ?? 'غير محدد'),
            if (invoice.notes != null && invoice.notes!.isNotEmpty)
              _buildInfoRow(context, Icons.note_alt_outlined, 'ملاحظات:', invoice.notes!),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(BuildContext context, IconData icon, String title, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4.0),
      child: Row(
        children: [
          Icon(icon, size: 18, color: Theme.of(context).primaryColor),
          const SizedBox(width: 8),
          Text(title, style: const TextStyle(fontWeight: FontWeight.bold)),
          const SizedBox(width: 8),
          Expanded(child: Text(value, style: Theme.of(context).textTheme.bodyLarge)),
        ],
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/widgets/details/invoice_items_list_details.dart ---
// lib/features/invoices/presentation/widgets/details/invoice_items_list_details.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoices_list_provider.dart';

class InvoiceItemsListDetails extends ConsumerWidget {
  final String invoiceId;
  const InvoiceItemsListDetails({super.key, required this.invoiceId});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final itemsAsync = ref.watch(invoiceItemsProvider(invoiceId));
    final theme = Theme.of(context);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('البنود', style: theme.textTheme.titleLarge),
        const SizedBox(height: 8),
        itemsAsync.when(
          data: (items) {
            return Card(
              child: ListView.separated(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                itemCount: items.length,
                itemBuilder: (context, index) {
                  final item = items[index];
                  return ListTile(
                    leading: CircleAvatar(child: Text('${index + 1}')),
                    title: Text(item.product.name),
                    subtitle: Text('الكمية: ${item.quantity} × السعر: \$${item.unitPrice.toStringAsFixed(2)}'),
                    trailing: Text('\$${item.subtotal.toStringAsFixed(2)}', style: const TextStyle(fontWeight: FontWeight.bold)),
                  );
                },
                separatorBuilder: (context, index) => const Divider(height: 1, indent: 16, endIndent: 16),
              ),
            );
          },
          loading: () => const Center(child: CircularProgressIndicator()),
          error: (e, s) => Text('خطأ في جلب البنود: $e'),
        ),
      ],
    );
  }
}


--- FILE: lib/features/invoices/presentation/widgets/invoice_card.dart ---
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:syria_store/features/invoices/data/models/invoice_model.dart';
// افترض وجود هذا الـ provider بناءً على السياق
import 'package:syria_store/features/reports/presentation/providers/report_provider.dart';
import 'package:syria_store/features/suppliers/presentation/providers/supplier_details_provider.dart';

class InvoiceCard extends ConsumerWidget {
  final Invoice invoice;

  const InvoiceCard({super.key, required this.invoice});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    // نفترض أن هذا الـ provider يجلب ملخصًا ماليًا للعميل المرتبط بالفاتورة
    final financialSummaryAsync = invoice.contactId != null
        ? ref.watch(supplierFinancialSummaryProvider(invoice.contactId!))
        : null;

    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '#${invoice.invoiceNumber}',
                  style: theme.textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  DateFormat('yyyy-MM-dd').format(invoice.invoiceDate),
                  style: theme.textTheme.bodySmall,
                ),
              ],
            ),
            const Divider(),
            Text('العميل: ${invoice.contactName ?? "زبون عابر"}'),
            Text(
              'المبلغ الإجمالي: ${NumberFormat.simpleCurrency(locale: 'en_US').format(invoice.totalAmount)}',
            ),
            const SizedBox(height: 8),

            // ==== بداية التعديل هنا ====
            if (financialSummaryAsync != null)
              financialSummaryAsync.when(
                data: (summary) {
                  // استخدام tryParse للأمان
                  final totalDue =
                      double.tryParse(
                        summary['total_due']?.toString() ?? '0.0',
                      ) ??
                      0.0;
                  final remainingBalance =
                      double.tryParse(
                        summary['remaining_balance']?.toString() ?? '0.0',
                      ) ??
                      0.0;

                  if (totalDue == 0 && remainingBalance == 0) {
                    return const SizedBox.shrink(); // لا تعرض شيئًا إذا كانت القيم صفرية
                  }

                  return Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.blue.shade50,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Column(
                      children: [
                        if (totalDue > 0)
                          Text(
                            'إجمالي الديون على العميل: ${NumberFormat.simpleCurrency(locale: 'en_US').format(totalDue)}',
                            style: TextStyle(color: Colors.red.shade700),
                          ),
                        if (remainingBalance != 0)
                          Text(
                            'الرصيد المتبقي للعميل: ${NumberFormat.simpleCurrency(locale: 'en_US').format(remainingBalance)}',
                          ),
                      ],
                    ),
                  );
                },
                loading: () => const SizedBox(
                  height: 20,
                  width: 20,
                  child: CircularProgressIndicator(strokeWidth: 2),
                ),
                error: (err, stack) => Text(
                  'خطأ في تحميل البيانات المالية',
                  style: TextStyle(color: Colors.red.shade700),
                ),
              ),
            // ==== نهاية التعديل ====
          ],
        ),
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/widgets/invoice_filters.dart ---
// lib/features/invoices/presentation/widgets/invoice_filters.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoices_list_provider.dart';

class InvoiceFilters extends ConsumerStatefulWidget {
  const InvoiceFilters({super.key});

  @override
  ConsumerState<InvoiceFilters> createState() => _InvoiceFiltersState();
}

class _InvoiceFiltersState extends ConsumerState<InvoiceFilters> {
  final _searchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _searchController.text = ref.read(invoiceSearchQueryProvider);
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final paymentFilter = ref.watch(invoicePaymentMethodFilterProvider);
    final deliveryFilter = ref.watch(invoiceDeliveryStatusFilterProvider);

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          TextField(
            controller: _searchController,
            decoration: const InputDecoration(
              hintText: 'ابحث برقم الفاتورة، اسم العميل...',
              prefixIcon: Icon(Icons.search),
            ),
            onChanged: (value) {
              ref.read(invoiceSearchQueryProvider.notifier).state = value;
            },
          ),
          const SizedBox(height: 12),
          Wrap(
            spacing: 8.0,
            runSpacing: 4.0,
            alignment: WrapAlignment.center,
            children: [
              FilterChip(
                label: const Text('الكل'),
                selected: paymentFilter == null && deliveryFilter == null,
                onSelected: (_) {
                  ref.read(invoicePaymentMethodFilterProvider.notifier).state = null;
                  ref.read(invoiceDeliveryStatusFilterProvider.notifier).state = null;
                },
              ),
              FilterChip(
                label: const Text('نقدي'),
                selected: paymentFilter == 'cash',
                onSelected: (selected) => ref.read(invoicePaymentMethodFilterProvider.notifier).state = selected ? 'cash' : null,
              ),
              FilterChip(
                label: const Text('آجل'),
                selected: paymentFilter == 'credit',
                onSelected: (selected) => ref.read(invoicePaymentMethodFilterProvider.notifier).state = selected ? 'credit' : null,
              ),
              FilterChip(
                label: const Text('تم التسليم'),
                selected: deliveryFilter == 'delivered',
                backgroundColor: Colors.green.withOpacity(0.1),
                selectedColor: Colors.green.shade700,
                onSelected: (selected) => ref.read(invoiceDeliveryStatusFilterProvider.notifier).state = selected ? 'delivered' : null,
              ),
              FilterChip(
                label: const Text('قيد التسليم'),
                selected: deliveryFilter == 'pending',
                backgroundColor: Colors.orange.withOpacity(0.1),
                selectedColor: Colors.orange.shade700,
                onSelected: (selected) => ref.read(invoiceDeliveryStatusFilterProvider.notifier).state = selected ? 'pending' : null,
              ),
            ],
          ),
        ],
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/widgets/invoice_items_section_widget.dart ---
// lib/features/invoices/presentation/widgets/invoice_items_section_widget.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:syria_store/features/invoices/data/models/invoice_item_model.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoice_provider.dart';
import 'package:syria_store/features/products/data/models/product_model.dart';

class InvoiceItemsSectionWidget extends ConsumerWidget {
  const InvoiceItemsSectionWidget({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final items = ref.watch(invoiceFormProvider).items;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text('بنود الفاتورة', style: theme.textTheme.titleLarge),
            FilledButton.icon(
              onPressed: () async {
                final selectedProduct = await context.push<ProductModel>(
                  '/products/select',
                );
                if (selectedProduct != null) {
                  ref
                      .read(invoiceFormProvider.notifier)
                      .addItem(
                        InvoiceItemModel(
                          product: selectedProduct,
                          quantity: 1,
                          unitPrice: 0.0,
                        ),
                      );
                }
              },
              icon: const Icon(Icons.add),
              label: const Text('إضافة بند'),
            ),
          ],
        ),
        const SizedBox(height: 8),
        if (items.isEmpty)
          const Center(
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Text('لم يتم إضافة أي بنود.'),
            ),
          )
        else
          ListView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            itemCount: items.length,
            itemBuilder: (context, index) {
              return InvoiceItemRow(
                key: ValueKey(items[index].product.id),
                item: items[index],
                itemNumber: index + 1,
                onRemove: () => ref
                    .read(invoiceFormProvider.notifier)
                    .removeItem(items[index].product.id),
                onQuantityChanged: (qty) => ref
                    .read(invoiceFormProvider.notifier)
                    .updateItemQuantity(items[index].product.id, qty),
                onPriceChanged: (price) => ref
                    .read(invoiceFormProvider.notifier)
                    .updateItemPrice(items[index].product.id, price),
              );
            },
          ),
      ],
    );
  }
}

// This sub-widget can stay here or be in its own file. Keeping it here is fine.
class InvoiceItemRow extends StatefulWidget {
  final InvoiceItemModel item;
  final int itemNumber;
  final VoidCallback onRemove;
  final ValueChanged<int> onQuantityChanged;
  final ValueChanged<double> onPriceChanged;

  const InvoiceItemRow({
    super.key,
    required this.item,
    required this.itemNumber,
    required this.onRemove,
    required this.onQuantityChanged,
    required this.onPriceChanged,
  });
  @override
  State<InvoiceItemRow> createState() => _InvoiceItemRowState();
}

class _InvoiceItemRowState extends State<InvoiceItemRow> {
  late TextEditingController _qtyController;
  late TextEditingController _priceController;

  @override
  void initState() {
    super.initState();
    _qtyController = TextEditingController(
      text: widget.item.quantity == 0 ? '' : widget.item.quantity.toString(),
    );
    _priceController = TextEditingController(
      text: widget.item.unitPrice == 0.0
          ? ''
          : widget.item.unitPrice.toStringAsFixed(2),
    );
  }

  @override
  void dispose() {
    _qtyController.dispose();
    _priceController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        final currentQty = widget.item.quantity == 0
            ? ''
            : widget.item.quantity.toString();
        if (_qtyController.text != currentQty) {
          _qtyController.text = currentQty;
        }

        final currentPrice = widget.item.unitPrice == 0.0
            ? ''
            : widget.item.unitPrice.toStringAsFixed(2);
        if (_priceController.text != currentPrice) {
          _priceController.text = currentPrice;
        }

        _qtyController.selection = TextSelection.fromPosition(
          TextPosition(offset: _qtyController.text.length),
        );
        _priceController.selection = TextSelection.fromPosition(
          TextPosition(offset: _priceController.text.length),
        );
      }
    });
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4),
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Text(
                  '${widget.itemNumber}.',
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    widget.item.product.name,
                    style: const TextStyle(fontWeight: FontWeight.bold),
                  ),
                ),
                IconButton(
                  onPressed: widget.onRemove,
                  icon: const Icon(Icons.delete_outline, color: Colors.red),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  flex: 2,
                  child: TextFormField(
                    controller: _qtyController,
                    decoration: const InputDecoration(
                      labelText: 'الكمية',
                      hintText: '1',
                    ),
                    keyboardType: TextInputType.number,
                    textAlign: TextAlign.center,
                    onChanged: (val) =>
                        widget.onQuantityChanged(int.tryParse(val) ?? 0),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  flex: 3,
                  child: TextFormField(
                    controller: _priceController,
                    decoration: const InputDecoration(
                      labelText: 'السعر',
                      prefixText: '\$',
                      hintText: '0.0',
                    ),
                    keyboardType: const TextInputType.numberWithOptions(
                      decimal: true,
                    ),
                    textAlign: TextAlign.center,
                    onChanged: (val) =>
                        widget.onPriceChanged(double.tryParse(val) ?? 0.0),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  flex: 3,
                  child: InputDecorator(
                    decoration: const InputDecoration(
                      labelText: 'الإجمالي',
                      border: OutlineInputBorder(),
                    ),
                    child: Center(
                      child: Text(
                        '\$${widget.item.subtotal.toStringAsFixed(2)}',
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/widgets/invoice_summary_widget.dart ---
// lib/features/invoices/presentation/widgets/invoice_summary_widget.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoice_provider.dart';

class InvoiceSummaryWidget extends ConsumerWidget {
  final TextEditingController discountController;
  final double totalAfterDiscount;

  const InvoiceSummaryWidget({
    super.key,
    required this.discountController,
    required this.totalAfterDiscount,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final invoiceState = ref.watch(invoiceFormProvider);

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('المجموع الفرعي:', style: theme.textTheme.titleMedium),
                Text(
                  '\$${invoiceState.subtotal.toStringAsFixed(2)}',
                  style: theme.textTheme.titleMedium,
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                const Text('الخصم:', style: TextStyle(fontSize: 16)),
                const SizedBox(width: 8),
                Expanded(
                  child: TextFormField(
                    controller: discountController,
                    keyboardType: TextInputType.number,
                    textAlign: TextAlign.center,
                    decoration: const InputDecoration(
                      hintText: '0.0',
                      prefixText: '\$ ',
                    ),
                    onChanged: (value) {
                      // We can directly call the notifier if we pass it, or let the parent handle it
                    },
                  ),
                ),
              ],
            ),
            const Divider(),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text('المجموع النهائي:', style: theme.textTheme.titleLarge),
                Text(
                  '\$${totalAfterDiscount.toStringAsFixed(2)}',
                  style: theme.textTheme.titleLarge?.copyWith(
                    color: theme.primaryColor,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}


--- FILE: lib/features/invoices/presentation/widgets/payment_section_widget.dart ---
// lib/features/invoices/presentation/widgets/payment_section_widget.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:syria_store/features/invoices/data/models/fund_model.dart';
import 'package:syria_store/features/invoices/presentation/providers/funds_provider.dart';
import 'package:syria_store/features/invoices/presentation/providers/invoice_provider.dart';

class PaymentSectionWidget extends ConsumerWidget {
  final TextEditingController usdPaymentController;
  final TextEditingController sypPaymentController;
  final ValueChanged<FundModel?> onUsdFundChanged;
  final ValueChanged<FundModel?> onSypFundChanged;
  final FundModel? selectedUsdFund;
  final FundModel? selectedSypFund;

  const PaymentSectionWidget({
    super.key,
    required this.usdPaymentController,
    required this.sypPaymentController,
    required this.onUsdFundChanged,
    required this.onSypFundChanged,
    this.selectedUsdFund,
    this.selectedSypFund,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final invoiceState = ref.watch(invoiceFormProvider);
    final usdFunds = ref.watch(usdFundsProvider);
    final sypFunds = ref.watch(sypFundsProvider);

    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('الدفع', style: theme.textTheme.titleLarge),
            const Divider(),
            Wrap(
              spacing: 8.0,
              runSpacing: 4.0,
              alignment: WrapAlignment.center,
              children: [
                ToggleButtons(
                  isSelected: [
                    invoiceState.paymentMethod == 'cash',
                    invoiceState.paymentMethod == 'credit',
                  ],
                  onPressed: (index) => ref
                      .read(invoiceFormProvider.notifier)
                      .setPaymentMethod(index == 0 ? 'cash' : 'credit'),
                  borderRadius: BorderRadius.circular(8),
                  constraints: const BoxConstraints(minHeight: 40.0),
                  children: const [
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 16.0),
                      child: Text('نقدي'),
                    ),
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 16.0),
                      child: Text('آجل'),
                    ),
                  ],
                ),
                SizedBox(
                  width: 180,
                  child: DropdownButtonFormField<String>(
                    value: invoiceState.deliveryStatus,
                    decoration: const InputDecoration(
                      labelText: 'حالة التسليم',
                      contentPadding: EdgeInsets.symmetric(horizontal: 10),
                    ),
                    items: const [
                      DropdownMenuItem(
                        value: 'delivered',
                        child: Text('تم التسليم'),
                      ),
                      DropdownMenuItem(
                        value: 'pending',
                        child: Text('قيد التسليم'),
                      ),
                    ],
                    onChanged: (val) {
                      if (val != null) {
                        ref
                            .read(invoiceFormProvider.notifier)
                            .setDeliveryStatus(val);
                      }
                    },
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Text(
              'تسجيل دفعة (رعبون أو دفعة كاملة):',
              style: theme.textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: TextFormField(
                    controller: usdPaymentController,
                    decoration: const InputDecoration(
                      labelText: 'المبلغ المدفوع \$',
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: DropdownButtonFormField<FundModel>(
                    hint: const Text('صندوق الدولار'),
                    value: selectedUsdFund,
                    items: usdFunds
                        .map(
                          (f) =>
                              DropdownMenuItem(value: f, child: Text(f.name)),
                        )
                        .toList(),
                    onChanged: onUsdFundChanged,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: TextFormField(
                    controller: sypPaymentController,
                    decoration: const InputDecoration(
                      labelText: 'المبلغ المدفوع ل.س',
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: DropdownButtonFormField<FundModel>(
                    hint: const Text('صندوق السوري'),
                    value: selectedSypFund,
                    items: sypFunds
                        .map(
                          (f) =>
                              DropdownMenuItem(value: f, child: Text(f.name)),
                        )
                        .toList(),
                    onChanged: onSypFundChanged,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}


